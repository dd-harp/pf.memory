[{"path":"https://dd-harp.github.io/pf.memory/articles/AoI-Hybrid.html","id":"hybrid-model","dir":"Articles","previous_headings":"","what":"Hybrid Model","title":"Hybrid Model for the Age of Infection","text":"function solve_dAoI computes first three moments AoI default. plot \\(n^{th}\\) root first three moments. ## Numerical Verification solving hybrid model variables track moments, using equations derived :","code":"aa = seq(5, 3*365, by = 5)  moment1y = momentAoY(aa, foiP3) par(mar = c(7, 4, 2, 2)) solve_dAoI(5/365, foiP3) -> mt  plot(mt$time, mt$xn1, type = \"l\", xlab = \"Age (in Days)\", ylab = expression(list(x, sqrt(x[paste(\"[2]\")]), sqrt(x[paste(\"[3]\")], 3))), ylim = range(mt$xn3^(1/3)))  lines(mt$time, mt$xn2^(1/2), col = \"purple\") lines(mt$time, mt$xn3^(1/3), col = \"darkgreen\") aa = seq(1, 5*365, by = 5)  moment1 = momentAoI(aa, foiP3) moment2 = momentAoI(aa, foiP3, n=2) moment3 = momentAoI(aa, foiP3, n=3) solve_dAoI(5/365, foiP3, Tmax = 5*365, dt=5) -> mt par(mfrow = c(2,2), mar = c(7, 4, 2, 2)) # Top Left plot(mt$time, mt$xn1, type = \"l\", xlab = \"Age (in Days)\", ylab = expression(x), lwd=3)  lines(aa, moment1, col = \"yellow\", lwd=2, lty=2)  # Top Right  plot(mt$time, mt$xn2, type = \"l\", xlab = \"Age (in Days)\", ylab = expression(x[paste(\"[2]\")]), lwd=3, col = \"purple\")  lines(aa, moment2, col = \"yellow\", lwd=2, lty=2) plot(mt$time, mt$xn3, type = \"l\", lwd=3, col = \"darkgreen\",      xlab = \"Age (in Days)\", ylab = expression(x[paste(\"[3]\")])) lines(aa, moment3, col = \"yellow\", lwd=2, lty=2) par(mar = c(7, 4, 2, 2)) solve_dAoI(5/365, foiP3) -> mt  plot(mt$time, mt$xn1, type = \"l\", xlab = \"Age (in Days)\", ylab = expression(list(x, sqrt(x[paste(\"[2]\")]), sqrt(x[paste(\"[3]\")], 3))), lwd=3, ylim = range(mt$xn3^(1/3)))  lines(mt$time, mt$xn2^(1/2), col = \"purple\", lwd=3) lines(mt$time, mt$xn3^(1/3), col = \"darkgreen\", lwd=3)  lines(aa, moment1, col = \"yellow\", lwd=2, lty=2) lines(aa, moment2^(1/2), col = \"yellow\", lwd=2, lty=2) lines(aa, moment3^(1/3), col = \"yellow\", lwd=2, lty=2)"},{"path":"https://dd-harp.github.io/pf.memory/articles/AoI.html","id":"the-density-function","dir":"Articles","previous_headings":"","what":"The Density Function","title":"Age of Infection","text":"following shows distribution AoI looks like cohort age 2.  , plot distributions 12 cohorts age 2, born one month apart.","code":"plot(a2years, dAoI(a2years, max(a2years), foiP3), type =\"l\", xlab = \"Parasite Age\", ylab = expression(F[A](alpha, a, tau)), ylim = c(0,0.009)) plot(a2years, dAoI(a2years, max(a2years), foiP3), type = \"n\", xlab = \"Parasite Age\", ylab = expression(F[A](alpha, a, tau)), ylim = c(0,0.013)) for(i in 1:12)   lines(a2years, dAoI(a2years,max(a2years),foiP3, tau=30*i), col = clrs[i])"},{"path":"https://dd-harp.github.io/pf.memory/articles/AoI.html","id":"the-distribution-function","dir":"Articles","previous_headings":"","what":"The Distribution Function","title":"Age of Infection","text":"","code":"plot(a2years, cumsum(dAoI(a2years, max(a2years), foiP3)), type = \"l\", xlab = \"Parasite Cohort Age\", ylab = expression(1-F[X](alpha, a, tau)), lwd=2) lines(a2years, pAoI(a2years, max(a2years), foiP3), col = \"red\", lwd=2, lty =2) par(mar = c(5,4,1,2))  plot(a2years, pAoI(a2years, max(a2years), foiP3), type = \"n\", xlab =  expression(list(alpha, \" Parasite Age\")), ylab = expression(F[X](alpha, a, tau)))  for(i in 1:12)   lines(a2years, pAoI(a2years,max(a2years), foiP3, tau=30*i), col = clrs[i])"},{"path":"https://dd-harp.github.io/pf.memory/articles/AoI.html","id":"random-numbers","dir":"Articles","previous_headings":"","what":"Random Numbers","title":"Age of Infection","text":"","code":"par(mar = c(5,4,1,2)) a5years = 0:(5*365) rhx = rAoI(10000, 5*365, foiP3) hist(rhx, breaks = c(0:c(5*365)), right=F, probability=T, main = \"\", xlab = expression(alpha), border = grey(0.5)) cdf1 = pAoI(a5years, 5*365, foiP3) pdf1 = dAoI(a5years, 5*365, foiP3)  lines(a5years, pdf1, col=\"red\", lwd=2) par(mar = c(5,4,1,2)) plot(ecdf(rhx), xlim = c(0,1825), cex=0.2, main = \"\", xlab = expression(alpha)) lines(a5years, cdf1, col = \"red\", lty = 2, lwd=2)"},{"path":"https://dd-harp.github.io/pf.memory/articles/AoI.html","id":"moments","dir":"Articles","previous_headings":"","what":"Moments","title":"Age of Infection","text":"Let \\(x\\) denote first moment \\(A_\\tau()\\): \\[x_\\tau() = \\left< A_\\tau() \\right> = \\int_0^\\infty \\alpha \\frac{z_\\tau(\\alpha, )} {m_\\tau()}\\] Similarly, let \\(x_\\tau()[n]\\) denote higher order moments \\(A_\\tau()\\): \\[x_{n}(, \\tau) = \\int_0^\\infty \\alpha^n \\frac{z_\\tau(\\alpha, )} {m_\\tau()}\\] first three moments AoY plotted time. top plot, ’ve also plotted \\(n^{th}\\) root \\(n^{th}\\) moment.","code":"aa = seq(1, 5*365, by = 5)  moment1 = momentAoI(aa, foiP3) moment2 = momentAoI(aa, foiP3, n=2) moment3 = momentAoI(aa, foiP3, n=3) par(mfrow = c(3,1), mar = c(0.5, 4, 0.5, 2)) plot(aa, moment1, type = \"l\", xlab = \"\", ylab = expression(E(A)), lwd=2, xaxt=\"n\", ylim = range((moment3)^(1/3)) )  lines(aa, sqrt(moment2), col = \"darkgreen\") lines(aa, (moment3)^(1/3), col = \"purple\") plot(aa, moment2, type = \"l\", xlab = \"\", ylab = expression(E(A^2)), lwd=2, xaxt=\"n\", col = \"darkgreen\")  plot(aa, moment3, type = \"l\", xlab = \"\", ylab = expression(E(A^2)), lwd=2, col = \"purple\")  mtext(\"Age (in Days)\", 1, 3)"},{"path":"https://dd-harp.github.io/pf.memory/articles/AoY-Hybrid.html","id":"derivation-for-dyda","dir":"Articles","previous_headings":"","what":"Derivation for \\(dy/da\\)","title":"AoY Hybrid Model","text":"start multiplying \\(\\alpha\\) integrating respect \\(\\alpha\\): \\[ \\int_0^\\alpha \\frac{\\partial y(\\alpha, )}{\\partial } d \\alpha + \\int_0^\\alpha \\frac{\\partial y(\\alpha, )}{\\partial \\alpha} d\\alpha = - \\left(F(r,m)  + h \\right) \\int_0^\\alpha y(\\alpha, ) d\\alpha \\] \\[\\int_0^\\alpha y(\\alpha, ) d\\alpha =  \\left<Y \\right> p\\] \\[ \\frac{d \\left< Y \\right> p}{da} + \\int_0^\\alpha dy = - p \\left(F(r,m) + h \\right) \\left< Y \\right>    \\] Using chain rule: \\[ \\frac{\\partial \\left<\\right> p}{\\partial }= p \\frac{\\partial \\left<\\right>}{\\partial }  + \\left<\\right> \\frac{\\partial p}{\\partial }   \\] substituting: \\[ p \\frac{d \\left< Y \\right>}{da} + \\left<Y \\right> \\frac{dp}{da}  + \\int_0^\\alpha dy = - p \\left(F(r,m) + h \\right) \\left<Y \\right> \\] \\(dp/da = h(1-p) - R(m) p\\) \\[ p \\frac{d \\left< Y \\right>}{da} = - \\left[h (1-p) - R(m) p \\right] \\left<Y \\right>   - p \\left(F(r,m) + h \\right) \\left<Y \\right>  - \\int_0^\\alpha dy   \\] now lots things cancel, : \\[ p \\frac{d \\left< Y \\right>}{da} = - h \\left<Y \\right> -(F(r,m)-R(m)) \\left<Y \\right> - \\int_0^\\alpha dy   \\] last term, integrate parts: \\[ \\int_0^\\alpha \\partial z = \\alpha y(,\\alpha) \\big|_{\\alpha = } - \\alpha y(,\\alpha) \\big|_{\\alpha = 0} - \\int_0^y d\\alpha \\] simplifies : (first terms wrong, think wrong) \\[ \\int_0^\\alpha \\partial y =  h_d(0)e^{-ra} \\] \\[ \\frac{dy}{da} = 1 - \\frac{h}{p} y  - \\left( F(r,m) - R(m) \\right) y \\]","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/AoY-Hybrid.html","id":"frm","dir":"Articles","previous_headings":"","what":"\\(F(r,m)\\)","title":"AoY Hybrid Model","text":"intuition changes AoY worked treating MoI cases. arrived function: \\[F(r, \\zeta) = R(m) \\left( 1 + \\frac{\\zeta^{\\sqrt{2}}}{4} + \\sum_{k \\geq 3} \\frac{1}{k} \\frac{\\zeta^3}{k!} \\right). \\] \\[F(r, \\zeta) = r \\frac{\\mbox{Pr}(\\zeta=1; m(t))}{\\mbox{Pr}(\\zeta>0; m(t))} \\left( 1 + \\frac{\\zeta^{\\sqrt{2}}}{4} + \\sum_{k \\geq 3} \\frac{1}{k} \\frac{\\zeta^3}{k!} \\right). \\] Performance seem improve adding terms \\(k>5.\\) \\(\\zeta=1\\) MoI=1, term clear. cancels \\(R(m)\\) term. reasoned MoI 2 greater, change occur probability \\(1/\\zeta\\), increasing AoY something close \\(y\\). \\(\\zeta=2\\): Somehow, made mistake wrote first term, didn’t notice much later. fiddling around exponent, found \\(\\zeta^{\\sqrt{2}}\\) worked better \\(\\zeta\\) (started, mistake), curiously, better \\(\\zeta^2\\) \\(\\zeta>2\\): seemed work reasonably well. Ultimately, justification using formula seems work quite well.","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/AoY.html","id":"aoy-density","dir":"Articles","previous_headings":"","what":"AoY Density","title":"Age of the Youngest Infection (AoY)","text":"","code":"aoy = dAoY(1:1825, 5*365, foiP3) raoy = rAoY(10^5, 5*365, foiP3) hist(raoy, breaks=c(0:(5*365)), right=F, plot=F)->daoy plot(daoy$mids, daoy$density, type = \"l\") lines(1:1825, aoy, type = \"l\", col = \"red\")"},{"path":"https://dd-harp.github.io/pf.memory/articles/AoY.html","id":"moments","dir":"Articles","previous_headings":"","what":"Moments","title":"Age of the Youngest Infection (AoY)","text":"first three moments AoY plotted time. top plot, ’ve also plotted \\(n^{th}\\) root \\(n^{th}\\) moment.","code":"aa = seq(5, 5*365, by = 5)  moment1y = momentAoY(aa, foiP3) moment2y = momentAoY(aa, foiP3, n=2) moment3y = momentAoY(aa, foiP3, n=3) par(mfrow = c(4,1), mar = c(0.5, 4, 0.5, 2)) plot(aa, moment1y, type = \"l\", xlab = \"\", ylab = expression(E(Y)), lwd=2, xaxt=\"n\", ylim = range((moment3y)^(1/3)) )  lines(aa, sqrt(moment2y), col = \"darkgreen\") lines(aa, (moment3y)^(1/3), col = \"purple\") plot(aa, moment2y, type = \"l\", xlab = \"\", ylab = expression(E(Y^2)), lwd=2, xaxt=\"n\", col = \"darkgreen\")  plot(aa, moment3y, type = \"l\", xlab = \"\", ylab = expression(E(Y^2)), lwd=2, col = \"purple\")  mtext(\"Age (in Days)\", 1, 3)"},{"path":"https://dd-harp.github.io/pf.memory/articles/AoY.html","id":"derivation","dir":"Articles","previous_headings":"","what":"Derivation","title":"Age of the Youngest Infection (AoY)","text":"First, note CDF minimum \\(n\\) random values AoI cohort : \\[1-(1-F_A(\\alpha,,\\tau))^n\\] Using , can compute CDF full distribution AoY across population: \\[F_Y(\\alpha, , \\tau) = \\frac{1}{p_\\tau()} \\sum_{\\zeta>0} \\mbox{dpois}\\left(\\zeta,m_\\tau()\\right) \\left( 1-(1-F_A(\\alpha,,\\tau))^\\zeta \\right)\\] rewriting slightly: \\[F_Y(\\alpha, , \\tau)  p_\\tau() = \\sum_{\\zeta>0} \\frac{m_\\tau()^\\zeta}{\\zeta!} e^{-m_\\tau()} \\left(1- \\left(1-F_A \\left(\\alpha,, \\tau\\right)\\right)^\\zeta\\right)\\] pulling \\(e^{-m_\\tau()}\\) recombining terms, get: \\[F_Y (\\alpha, , \\tau) p_\\tau()= p_\\tau() - e^{-m_\\tau()} \\sum_{\\zeta>0} \\frac{ \\left[m_\\tau() \\left(1-F_A \\left(\\alpha,, \\tau\\right)\\right)\\right]^\\zeta}{\\zeta!}\\] sum \\(\\zeta=0\\ldots\\infty,\\) expression inside simple, sum \\(M>0\\), add term \\(M=0\\) sum, subtract outside: \\[F_Y(\\alpha, ,\\tau) p_\\tau() = p_\\tau() - e^{-m_\\tau()} \\left(-1+ \\sum_{\\zeta>=0} \\frac{ \\left[m_\\tau() \\left(1-F_A \\left(\\alpha,\\right)\\right)\\right]^\\zeta}{\\zeta!} \\right)\\] \\(e^{-m_\\tau()} = 1-p_\\tau()\\) infinite sum simply exponential, : \\[F_Y(\\alpha, , \\tau) p_\\tau() = p_\\tau() + 1-p_\\tau() - e^{-m_\\tau()} e^{m_\\tau() (1-F_A(\\alpha, , \\tau))}  \\] \\[F_Y(\\alpha, ,\\tau) p_\\tau() = 1-e^{-m_\\tau()F_a(\\alpha, )}\\] \\[F_Y(\\alpha, ,\\tau) = \\frac{1-e^{-m_\\tau()F_A(\\alpha, ,\\tau)}}{p_\\tau()}.\\] PDF AoY found taking derivative \\(F_Y\\): \\[ \\begin{array}{rcl} Y \\sim f_Y(\\alpha, , \\tau) & = & \\frac{d F_Y(\\alpha, ,\\tau)}{d\\alpha} \\\\ &=&  \\; f_A(\\alpha, ) e^{-m_\\tau() F_A(\\alpha, ,\\tau)}   \\frac{\\textstyle{m_\\tau()}}{\\textstyle{p_\\tau()}}\\\\ \\end{array} \\]","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Random Variables for Parasite Infection Dynamics","text":"Let \\(z_\\tau(\\alpha,)\\) denote density function infections age \\(\\alpha\\) host cohort age \\(\\) born day \\(\\tau\\). dynamics \\(z(\\alpha,)\\) population humans described following: \\[ \\frac{\\partial z}{\\partial } + \\frac{\\partial z}{\\partial \\alpha} = - r z \\] boundary condition: \\[     z_\\tau(0,) = h_\\tau() \\] can solve equation particular cohort exactly. Solutions describe density infections age \\(\\alpha\\) cohort (born day \\(\\tau\\)) age \\(\\): \\[\\begin{equation} z_\\tau(\\alpha,) = h_\\tau(-\\alpha) e^{-r \\alpha} \\tag{1} \\end{equation}\\] solutions \\(z_\\tau(\\alpha, )\\) thus depend function describes history exposure, \\(h_\\tau()\\), call force infection (FoI).","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"force-of-infection-foi","dir":"Articles","previous_headings":"","what":"Force of Infection (FoI)","title":"Random Variables for Parasite Infection Dynamics","text":"compute anything, must first set function describe exposure (see FoI vignette). define functions plot FoI cohort ages (red), can also compute population average FoI (black). Different cohorts experience different histories exposure.","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"computing-zda","dir":"Articles","previous_headings":"","what":"Computing zda","title":"Random Variables for Parasite Infection Dynamics","text":"function pf.memory::zda(alpha, , FoIpar, ...) uses formula Eq. 1 compute density parasite infections cohort humans ages. Using zda, can compute density parasites cohort age without solving full system equations. Given function describing FoI population, \\(h(t)\\), cohort birthday, \\(\\tau.\\) following computes density infections every age cohort age 3. plot \\(z_\\tau(\\alpha, )\\), note \\(\\alpha\\) grows larger, parasite cohort gets older. plot parasite cohorts age, time going backwards x-axis.  Now, can imagine zda look like several different host cohorts age three, born different times. effect, taking snapshot cohorts age, different times. curves different hosts born different months, thus experienced different levels exposure first two years life. annual FoI 5 infections, per person, per year (\\(\\bar h = 5/365\\)):","code":"alpha = 60 a = 6*365 zda(60, 6*365, foiP3) ## [1] 0.001601196 zz = zda(a3years, max(a3years), foiP3)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"multiplicity-of-infection-moi","dir":"Articles","previous_headings":"","what":"Multiplicity of Infection (MoI)","title":"Random Variables for Parasite Infection Dynamics","text":"define random variable \\(M\\) describing multiplicity infection (MoI). distribution MoI Poisson (see MoI vignette). \\[M_\\tau() \\sim f_M(\\zeta; , \\tau) = \\mbox{Pois}(m_\\tau())\\] Since \\(z_\\tau(\\alpha, )\\) describes density infections age \\(\\alpha\\) cohort age \\(\\), density infections must MoI. Since \\(0 \\leq \\alpha < \\), must true : \\[\\begin{equation} \\tag{2} m_\\tau() = \\int_0^z_\\tau(\\alpha, ) d \\alpha \\end{equation}\\] function computes \\(m_\\tau()\\) called meanMoI. , plot average MoI host cohort ages:","code":"mm = meanMoI(a3years, foiP3, hhat=5/365)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"age-of-infection-aoi","dir":"Articles","previous_headings":"","what":"Age of Infection (AoI)","title":"Random Variables for Parasite Infection Dynamics","text":"define random variable \\(A_\\tau()\\) describes age infection (AoI), given formula \\[ A_\\tau() \\sim f_A(\\alpha; , \\tau) = \\frac{z_\\tau(\\alpha,)}{m_\\tau()} \\]","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"the-density-function-daoi","dir":"Articles","previous_headings":"Age of Infection (AoI)","what":"The Density Function, dAoI","title":"Random Variables for Parasite Infection Dynamics","text":"can compute \\(A_\\tau()\\) using density function dAoI:  Now, plot distribution AoI cohorts age two, born different months (), notice distributions changed shapes:","code":"f_A = dAoI(a3years, max(a3years), foiP3)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"the-distribution-function-paoi","dir":"Articles","previous_headings":"Age of Infection (AoI)","what":"The Distribution Function, pAoI","title":"Random Variables for Parasite Infection Dynamics","text":"distribution function \\(A_\\tau()\\) : \\[ F_A() \\sim \\int_0^\\alpha f_A(\\alpha; , \\tau) d\\alpha \\] functions work correctly, get approximately answer computing cumulative sum dAoI. shouldn’t expect answers exactly , close, pAoI black.","code":"F_A = pAoI(a3years, max(a3years), foiP3) F_A_alt = cumsum(f_A) par(mar = c(5,4,1,1))  plot(a3years, F_A, type = \"l\",       xlab = \"Parasite Cohort Age\",       ylab = expression(1-F[X](alpha, a, tau)), lwd=3)  lines(a3years, F_A_alt, col = \"red\", lwd=2, lty =2)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"random-numbers-raoi","dir":"Articles","previous_headings":"Age of Infection (AoI)","what":"Random Numbers, rAoI","title":"Random Variables for Parasite Infection Dynamics","text":"function rAoI uses pAoI generate random numbers \\(F_A(\\alpha)\\) simple visual check computes empirical CDF random variates \\(F_A(\\alpha)\\) computed using pAoI  can also plot distribution functions.","code":"rhx = rAoI(10000, 3*365, foiP3) par(mar = c(5,4,1,2)) plot(stats::ecdf(rhx), xlim = c(0,1095), cex=0.2, main = \"\",       xlab = expression(list(alpha, paste(\"Parasite Age (in Days)\"))),       ylab = expression(list(F[A](alpha), paste(\"ecdf\")))) lines(a3years, F_A, col = \"red\", lty = 2, lwd=2)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"aoi-moments","dir":"Articles","previous_headings":"Age of Infection (AoI)","what":"AoI Moments","title":"Random Variables for Parasite Infection Dynamics","text":"Let \\(x\\) denote first moment \\(A_\\tau()\\): \\[x_\\tau() = \\left< A_\\tau() \\right> = \\int_0^\\infty \\alpha \\frac{z_\\tau(\\alpha, )} {m_\\tau()}\\] Similarly, let \\(x_\\tau()[n]\\) denote higher order moments \\(A_\\tau()\\): \\[x_{[n]}(, \\tau) = \\int_0^\\infty \\alpha^n \\frac{z_\\tau(\\alpha, )} {m_\\tau()}\\] first three moments AoY plotted time. top plot, ’ve also plotted \\(n^{th}\\) root \\(n^{th}\\) moment. ## Age Youngest Infection (AoY) derived random variable \\(Y_\\tau()\\) describing age youngest infection (AoY). density function AoY : \\[Y_\\tau() \\sim f_Y(\\alpha; , \\tau) = f_A(\\alpha, ,\\tau) e^{-m_\\tau() F_A(\\alpha, ,\\tau)} \\frac{m_\\tau()}{p_\\tau()}\\] distribution function : \\[F_Y() \\sim \\frac{1-e^{-m_\\tau()F_A(\\alpha, ,\\tau)}}{1-e^{-m_\\tau()}} = \\frac{1-e^{-m_\\tau()F_A(\\alpha, ,\\tau)}}{p_\\tau()} \\] derivations found Suppplement Henry JM, et al. (2024)1 mean AoY : \\[ \\left< Y_\\tau() \\right> = \\int_0^\\alpha \\; f_Y(\\alpha, , \\tau) \\; d\\alpha \\] higher order moments AoY : \\[\\left< Y_\\tau()^n \\right> = \\int_0^n \\alpha^n \\; f_y(\\alpha, , \\tau) \\; d\\alpha \\]","code":"moment1 = momentAoI(a3years, foiP3) moment2 = momentAoI(a3years, foiP3, n=2) moment3 = momentAoI(a3years, foiP3, n=3)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"aoy-density-daoy","dir":"Articles","previous_headings":"Age of Infection (AoI)","what":"AoY Density, dAoY","title":"Random Variables for Parasite Infection Dynamics","text":"density function computed function dAoY. can compare \\(f_Y(\\alpha)\\) (black) \\(f_A(alpha)\\) (grey).","code":"f_Y = dAoY(a3years, 3*365, foiP3)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"random-variables-raoy","dir":"Articles","previous_headings":"Age of Infection (AoI)","what":"Random Variables, rAoY","title":"Random Variables for Parasite Infection Dynamics","text":"","code":"raoy = rAoY(10^5, 3*365, foiP3) hist(raoy, breaks=seq(0, 1095, by = 15),       right=F, probability=T, main = \"\",       xlab = expression(list(alpha, paste(\"Parasite Age (in Days)\"))),       border = grey(0.5)) -> out lines(a3years, f_Y, type = \"l\", col = \"red\")"},{"path":"https://dd-harp.github.io/pf.memory/articles/Dynamics.html","id":"aoy-moments","dir":"Articles","previous_headings":"Age of Infection (AoI)","what":"AoY Moments","title":"Random Variables for Parasite Infection Dynamics","text":"first three moments AoY plotted time. top plot, ’ve also plotted \\(n^{th}\\) root \\(n^{th}\\) moment.  Next: vignette Multiplicity Infection: Hybrid Models, Queuing Models, Verification, show mean MoI computed using formula Eq. 2 gives answer approaches.","code":"aa = seq(5, 3*365, by = 5)  moment1y = momentAoY(aa, foiP3) moment2y = momentAoY(aa, foiP3, n=2) moment3y = momentAoY(aa, foiP3, n=3)"},{"path":"https://dd-harp.github.io/pf.memory/articles/FoI-TraceFunctions.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"FoI Trace Functions","text":"G. R. Port, P. F. L. Boreham, J. H. Bryan, relationship host size feeding mosquitoes Anopheles Gambiae Giles complex (Diptera: Culicidae). Bulletin Entomological Research 70, 133–144 (1980). P. Carnevale, J. L. Frézil, M. F. Bosseno, F. Le Pont, J. Lancien, [aggressiveness Anopheles gambiae relation age sex human subjects]. Bull. World Health Organ. 56, 147–154 (1978). K. . Liebman, et al., Determinants Heterogeneous Blood Feeding Patterns Aedes Aegypti Iquitos, Peru. PLoS Negl. Trop. Dis. 8, e2702 (2014).","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/FoI.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"The Force of Infection (FoI)","text":"G. R. Port, P. F. L. Boreham, J. H. Bryan, relationship host size feeding mosquitoes Anopheles Gambiae Giles complex (Diptera: Culicidae). Bulletin Entomological Research 70, 133–144 (1980). P. Carnevale, J. L. Frézil, M. F. Bosseno, F. Le Pont, J. Lancien, [aggressiveness Anopheles gambiae relation age sex human subjects]. Bull. World Health Organ. 56, 147–154 (1978). K. . Liebman, et al., Determinants Heterogeneous Blood Feeding Patterns Aedes Aegypti Iquitos, Peru. PLoS Negl. Trop. Dis. 8, e2702 (2014).","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Hybrid Models","text":"following, review hybrid models MoI, make brief observation prevalence, derive hybrid variables mean higher order moments AoI.","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"moi","dir":"Articles","previous_headings":"","what":"MoI","title":"Hybrid Models","text":"random variable \\(M\\) describes distribution MoI population, follows Poisson. , provide numerical demonstration novel computational approach equivalent queuing model \\(M/M/\\infty\\), also equivalent hybrid models multiplicity infection (Nåsell, . 1985)1:","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"mminfty","dir":"Articles","previous_headings":"MoI","what":"\\(M/M/\\infty\\)","title":"Hybrid Models","text":"Elsewhere, dynamics MoI described using queuing model \\(M/M/\\infty\\). MoI increases FoI, parasite can clear rate, \\(r\\). following diagram changes fraction population MoI \\(=\\), denoted \\(\\zeta_i\\), change host cohort force infection \\(h_\\tau(),\\) clearance. \\[\\begin{equation} \\begin{array}{ccccccccc} \\zeta_0 &  {h\\atop \\longrightarrow} \\atop {\\longleftarrow \\atop r} & \\zeta_1 & {h\\atop \\longrightarrow} \\atop {\\longleftarrow \\atop {2r}} & \\zeta_2 & {h \\atop \\longrightarrow} \\atop {\\longleftarrow \\atop {3r}} & \\zeta_3 & {h \\atop \\longrightarrow} \\atop {\\longleftarrow \\atop {4r}}& \\ldots \\end{array} \\end{equation}\\] master equations \\(M/M/\\infty\\) :\\[\\begin{equation} \\begin{array}{rl} \\frac{d\\zeta_0}{da} &= -h_\\tau() \\zeta_0 + r \\zeta_1   \\\\ \\frac{d\\zeta_i}{da} &= -\\left( h_\\tau\\left(\\right) + r \\right) \\zeta_i + h_\\tau\\left(\\right) \\zeta_{-1} + r\\left(+1\\right) \\zeta_{+1}   \\\\ \\end{array} \\end{equation}\\] master equations describe infinite set equations, find numerical solutions, must solve finite set equations. need compute maximum MoI vanishingly small portion distribution. constant \\(h\\), steady state distribution \\(\\zeta\\) Poisson mean \\(h/r.\\) set \\(N = \\max(4h/r,24),\\) tail negligible. , set range \\(1 \\pm 10^{-7}\\) plot portion distribution covered.  must define trace FoI function.  verify works, compute MoI day first three years life. peek distribution MoI = \\(1, \\ldots, 5\\) day 500:","code":"m = seq(0.1, 24) N = pmax(24, 4*m) plot(m, ppois(N,m), type = \"l\", ylim = c(1-1e-07,1+1e-07)) solveMMinfty(3/365, foiP3) -> out"},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"nåsells-hybrid-model","dir":"Articles","previous_headings":"MoI","what":"Nåsell’s Hybrid Model","title":"Hybrid Models","text":"can also solve hybrid equation get mean MoI (Nåsell, . 1985)\\(^1\\): \\[\\frac{dm}{da} = h - rm\\] unction dmda computes derivative, can solve hybrid equation using solve_dm plot output:","code":"solve_dm(3/365, foiP3) -> mt  plot(mt$time, mt$m, type = \"l\",       xlab = \"Age (in Days)\", ylab = expression(m[tau](a)))"},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"numerical-verification","dir":"Articles","previous_headings":"MoI","what":"Numerical Verification","title":"Hybrid Models","text":"presented three ways computing mean MoI using cohort ages arbitrary function \\(h_\\tau()\\): Using meanMoI integrates zda: \\[\\int_0^z_\\tau(\\alpha, ) d\\alpha\\] solving queuing model \\(M/M/\\infty\\), compartmental model tracks full distribution MoI, competing mean: solving hybrid model tracking mean MoI. following plots three graph using different colors different widths, colors, patterns:  maximum errors order \\(1e-07\\) developed hybrid model can use compute mean higher order moments age infection (AoI). related vignette (AoI), define AoI random variable develop functions compute moments. , develop notation moments:","code":"aa = 0:1825 v1 = meanMoI(aa, foiP3, hhat=5/365) v2 = solveMMinfty(5/365, foiP3, Tmax=1825)$m v3 = solve_dm(5/365, foiP3, Tmax=1825)[,2] par(mfrow = c(2,2))  plot(aa, v1, type = \"l\", col = \"red\", lwd=4,       xlab = \"Age (in Days)\",       ylab = expression(m[tau](a)),       main = \"meanMoI\")  plot(aa, v2, type = \"l\", lwd=2,       xlab = \"Age (in Days)\",       ylab = expression(m[tau](a)),       main = \"solveMMinfty\") lines(aa, v2, type = \"l\", col = \"yellow\", lwd=2, lty=2)  plot(aa, v3, type = \"l\", col = \"darkblue\", lwd=1,       xlab = \"Age (in Days)\",       ylab = expression(m[tau](a)),       main = \"solve_dm\")  plot(aa, v1, type = \"l\", col = \"red\", lwd=4,       xlab = \"Age (in Days)\",       ylab = expression(m[tau](a)),       main = \"All Three\") lines(aa, v2, type = \"l\", col = \"yellow\", lwd = 2) lines(aa, v3, type = \"l\", col = \"darkblue\", lwd = 2, lty =2) c(max(abs(v1-v2)), max(abs(v2-v3)), max(abs(v1-v3))) ## [1] 1.833689e-07 9.797276e-08 1.833689e-07"},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"prevalence","dir":"Articles","previous_headings":"","what":"Prevalence","title":"Hybrid Models","text":"George Maccdonald published model superinfection 19502. presenting model, Macdonald trying solve problem: super-infection possible, long take person clear parasites become uninfected ? Macdonald proposed solution, problem mathematical formulation (essay Paul Fine, 1975, recommended reading)3: model Macdonald described didn’t match function used. model formulated part Garki project (Dietz K, et al., 1974)4, model allowed superinfection proposed useful approximating model. One solution came taking hybrid modeling approach (Nåsell , 1985)5, just discussed. Nåsell showed distribution MoI converge Poisson distribution: \\[M(t) \\sim f_M(\\zeta; m) = \\mbox{Pois}(m(t))\\] Since \\(m\\) mean Poisson, prevalence infection complement zero term: \\[p(t) = 1-\\mbox{Pois}(\\zeta =0; m(t)) = 1 - e^{-m(t)}\\] , nevertheless, sometimes useful know clearance rate, transition MoI = 1 MoI=0. Clearance infected class can occur person infected MoI one, infection clears: \\[ R(m) = r \\frac{\\mbox{Pr}(\\zeta=1; m(t))}{\\mbox{Pr}(\\zeta>0; m(t))} = r \\frac{m}{e^m - 1} \\] change prevalence thus described equation: \\[ \\frac{dp}{dt} = h(1-p)-R(m)p \\] interesting, solves problem modeling clearance superinfection, equation depends \\(m\\). Since can compute \\(p(t)\\) directly \\(m(t)\\), equation redundant. Code exists pf.memory compute prevalence three ways: Using function truePRa Using hybrid equations solve_dpda hybrid model solve_dm \\(p(t)= 1 - exp(-m(t))\\)","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"aoi---hybrid-variables","dir":"Articles","previous_headings":"","what":"AoI - Hybrid Variables","title":"Hybrid Models","text":"Let \\(x = \\left< \\right>;\\) x first moment AoI cohort age \\(\\), conditioned history exposure, given function \\(h\\). longer form: \\[x_\\tau(; h) = \\left< A_\\tau(; h) \\right> = \\int_0^\\infty \\alpha \\frac{z_\\tau(\\alpha, ; h_\\tau())} {m_\\tau(;h_\\tau())}\\] , show : \\[ \\frac{\\textstyle{dx}}{\\textstyle{da}} = 1- \\frac{\\textstyle{h}}{\\textstyle{m}} x   \\] Similarly, let \\(x_{[n]} = \\left< ^n \\right>\\) denote higher order moments random variable \\(\\). longer form: \\[x_{n}(, \\tau; h) = \\int_0^\\infty \\alpha^n \\frac{z_\\tau(\\alpha, ; h_\\tau())} {m_\\tau(;h_\\tau())}\\] show higher order moments can computed recursively: \\[ \\frac{\\textstyle{dx_{[n]}}}{\\textstyle{da}} = nx_{[n-1]} -     \\frac{\\textstyle{h}}{\\textstyle{m}} x_{[n]} \\] following, first demonstrate hybrid equations give answers direct computation moments.","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"solving","dir":"Articles","previous_headings":"AoI - Hybrid Variables","what":"Solving","title":"Hybrid Models","text":"function solve_dAoI computes first three moments AoI default. plot \\(n^{th}\\) root first three moments.","code":"par(mar = c(7, 4, 2, 2)) solve_dAoI(5/365, foiP3) -> mt  plot(mt$time, mt$xn1, type = \"l\", xlab = \"Age (in Days)\", ylab = expression(list(x, sqrt(x[paste(\"[2]\")]), sqrt(x[paste(\"[3]\")], 3))), ylim = range(mt$xn3^(1/3)))  lines(mt$time, mt$xn2^(1/2), col = \"purple\") lines(mt$time, mt$xn3^(1/3), col = \"darkgreen\")"},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"numerical-verification-1","dir":"Articles","previous_headings":"AoI - Hybrid Variables","what":"Numerical Verification","title":"Hybrid Models","text":"solving hybrid model variables track moments, using equations derived :","code":"aa = seq(1, 5*365, by = 5)  moment1 = momentAoI(aa, foiP3) moment2 = momentAoI(aa, foiP3, n=2) moment3 = momentAoI(aa, foiP3, n=3) solve_dAoI(5/365, foiP3, Tmax = 5*365, dt=5) -> mt par(mfrow = c(2,2), mar = c(7, 4, 2, 2)) # Top Left plot(mt$time, mt$xn1, type = \"l\", xlab = \"Age (in Days)\", ylab = expression(x), lwd=3)  lines(aa, moment1, col = \"yellow\", lwd=2, lty=2)  # Top Right  plot(mt$time, mt$xn2, type = \"l\", xlab = \"Age (in Days)\", ylab = expression(x[paste(\"[2]\")]), lwd=3, col = \"purple\")  lines(aa, moment2, col = \"yellow\", lwd=2, lty=2) plot(mt$time, mt$xn3, type = \"l\", lwd=3, col = \"darkgreen\",      xlab = \"Age (in Days)\", ylab = expression(x[paste(\"[3]\")])) lines(aa, moment3, col = \"yellow\", lwd=2, lty=2) par(mar = c(7, 4, 2, 2)) solve_dAoI(5/365, foiP3) -> mt  plot(mt$time, mt$xn1, type = \"l\", xlab = \"Age (in Days)\", ylab = expression(list(x, sqrt(x[paste(\"[2]\")]), sqrt(x[paste(\"[3]\")], 3))), lwd=3, ylim = range(mt$xn3^(1/3)))  lines(mt$time, mt$xn2^(1/2), col = \"purple\", lwd=3) lines(mt$time, mt$xn3^(1/3), col = \"darkgreen\", lwd=3)  lines(aa, moment1, col = \"yellow\", lwd=2, lty=2) lines(aa, moment2^(1/2), col = \"yellow\", lwd=2, lty=2) lines(aa, moment3^(1/3), col = \"yellow\", lwd=2, lty=2)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Hybrid.html","id":"aoy---hybrid-variables","dir":"Articles","previous_headings":"","what":"AoY - Hybrid Variables","title":"Hybrid Models","text":"Let \\(y\\) denote first moment AoY. \\[ y_\\tau() = \\int_0^\\alpha \\; f_Y(\\alpha, , \\tau) \\; d\\alpha \\] $$ differential equation \\(y_\\tau()\\) : \\[ \\frac{dy}{da} = 1 - \\frac{h}{p} y + F(r,m) \\frac{x}{p} \\] verify, can compute moment directly. function solve_dAoYda gives solutions: moments can computed directly using momentAoY following shows  errors minor – difference two methods days.","code":"solve_dAoYda(5/365, foiP3, Tmax=5*365, dt=5) -> mt moment1y = momentAoY(aa, foiP3)"},{"path":"https://dd-harp.github.io/pf.memory/articles/MoI.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Multiplicity of Infection","text":"random variable \\(M\\) describes distribution MoI population, follows Poisson. , provide numerical demonstration novel computational approach equivalent queuing model \\(M/M/\\infty\\), also equivalent hybrid models multiplicity infection (Nåsell, . 1985)1:","code":""},{"path":"https://dd-harp.github.io/pf.memory/articles/MoI.html","id":"mminfty","dir":"Articles","previous_headings":"","what":"\\(M/M/\\infty\\)","title":"Multiplicity of Infection","text":"Elsewhere, dynamics MoI described using queuing model \\(M/M/\\infty\\). MoI increases FoI, parasite can clear rate, \\(r\\). following diagram changes fraction population MoI \\(=\\), denoted \\(\\zeta_i\\), change host cohort force infection \\(h_\\tau(),\\) clearance. \\[\\begin{equation} \\begin{array}{ccccccccc} \\zeta_0 &  {h\\atop \\longrightarrow} \\atop {\\longleftarrow \\atop r} & \\zeta_1 & {h\\atop \\longrightarrow} \\atop {\\longleftarrow \\atop {2r}} & \\zeta_2 & {h \\atop \\longrightarrow} \\atop {\\longleftarrow \\atop {3r}} & \\zeta_3 & {h \\atop \\longrightarrow} \\atop {\\longleftarrow \\atop {4r}}& \\ldots \\end{array} \\end{equation}\\] master equations \\(M/M/\\infty\\) :\\[\\begin{equation} \\begin{array}{rl} \\frac{d\\zeta_0}{da} &= -h_\\tau() \\zeta_0 + r \\zeta_1   \\\\ \\frac{d\\zeta_i}{da} &= -\\left( h_\\tau\\left(\\right) + r \\right) \\zeta_i + h_\\tau\\left(\\right) \\zeta_{-1} + r\\left(+1\\right) \\zeta_{+1}   \\\\ \\end{array} \\end{equation}\\] master equations describe infinite set equations, find numerical solutions, must solve finite set equations. need compute maximum MoI vanishingly small portion distribution. constant \\(h\\), steady state distribution \\(\\zeta\\) Poisson mean \\(h/r.\\) set \\(N = \\max(4h/r,24),\\) tail negligible. , set range \\(1 \\pm 10^{-7}\\) plot portion distribution covered.  must define trace FoI function.  verify works, compute MoI day first three years life. peek distribution MoI = \\(1, \\ldots, 5\\) day 500:","code":"m = seq(0.1, 24) N = pmax(24, 4*m) plot(m, ppois(N,m), type = \"l\", ylim = c(1-1e-07,1+1e-07)) solveMMinfty(3/365, foiP3) -> out"},{"path":"https://dd-harp.github.io/pf.memory/articles/MoI.html","id":"hybrid-model","dir":"Articles","previous_headings":"","what":"Hybrid Model","title":"Multiplicity of Infection","text":"can also solve hybrid equation get mean MoI (Nåsell, . 1985)\\(^1\\): \\[\\frac{dm}{da} = h - rm\\] unction dmda computes derivative, can solve hybrid equation using solve_dm plot output:","code":"solve_dm(3/365, foiP3) -> mt  plot(mt$time, mt$m, type = \"l\",       xlab = \"Age (in Days)\", ylab = expression(m[tau](a)))"},{"path":"https://dd-harp.github.io/pf.memory/articles/MoI.html","id":"verification","dir":"Articles","previous_headings":"","what":"Verification","title":"Multiplicity of Infection","text":"presented three ways computing mean MoI using cohort ages arbitrary function \\(h_\\tau()\\): Using meanMoI integrates zda: \\[\\int_0^z_\\tau(\\alpha, ) d\\alpha\\] solving queuing model \\(M/M/\\infty\\), compartmental model tracks full distribution MoI, competing mean: solving hybrid model tracking mean MoI. following plots three graph using different colors different widths, colors, patterns:  maximum errors order \\(1e-07\\)","code":"aa = 0:1825 v1 = meanMoI(aa, foiP3, hhat=5/365) v2 = solveMMinfty(5/365, foiP3, Tmax=1825)$m v3 = solve_dm(5/365, foiP3, Tmax=1825)[,2] par(mfrow = c(2,2))  plot(aa, v1, type = \"l\", col = \"red\", lwd=4,       xlab = \"Age (in Days)\",       ylab = expression(m[tau](a)),       main = \"meanMoI\")  plot(aa, v2, type = \"l\", lwd=2,       xlab = \"Age (in Days)\",       ylab = expression(m[tau](a)),       main = \"solveMMinfty\") lines(aa, v2, type = \"l\", col = \"yellow\", lwd=2, lty=2)  plot(aa, v3, type = \"l\", col = \"darkblue\", lwd=1,       xlab = \"Age (in Days)\",       ylab = expression(m[tau](a)),       main = \"solve_dm\")  plot(aa, v1, type = \"l\", col = \"red\", lwd=4,       xlab = \"Age (in Days)\",       ylab = expression(m[tau](a)),       main = \"All Three\") lines(aa, v2, type = \"l\", col = \"yellow\", lwd = 2) lines(aa, v3, type = \"l\", col = \"darkblue\", lwd = 2, lty =2) c(max(abs(v1-v2)), max(abs(v2-v3)), max(abs(v1-v3))) ## [1] 1.833689e-07 9.797276e-08 1.833689e-07"},{"path":"https://dd-harp.github.io/pf.memory/articles/Simple_Infections.html","id":"mean-logged-parasite-densities-mualpha","dir":"Articles","previous_headings":"","what":"Mean, logged parasite densities, \\(\\mu(\\alpha)\\)","title":"Parasite Densities in Simple Infections","text":"pf.memory, S3 function family developed model relationship age infection (AoI) parasite infection, \\(\\alpha\\), mean, \\(\\mu(\\alpha).\\) function alpha2mu.base following form: \\[\\begin{equation} \\mu(\\alpha) = \\begin{cases}     \\text{NA} \\ & \\mbox{} 0 \\leq \\alpha < 7 \\\\[10pt] %      l +  (b - l)  \\frac{{\\textstyle \\alpha}}{{\\textstyle D}}   & \\mbox{} 7 \\leq \\alpha \\leq D  \\\\[10pt]       l + (b - l)  \\frac{{\\textstyle \\alpha}}{{\\textstyle \\delta}}   & \\mbox{} 7 \\leq \\alpha \\leq \\delta  \\\\[10pt]      l + (b - l) e^{-s_\\alpha (\\alpha-\\delta)}   & \\mbox{} \\alpha \\geq \\delta\\\\   \\end{cases} \\label{mualpha} \\end{equation}\\] pf.memory, functions set parameters case, -writable defaults: plot two functions : default parameters (black), parameters (dark blue):","code":"base_pars = par_alpha2mu_base() base_pars1 = par_alpha2mu_base(tildeb=11, Sa=0.0045) aalpha = 7:366 mu_alpha =  alpha2mu(aalpha, 0, base_pars) mu_alpha1 =  alpha2mu(aalpha, 0, base_pars1)"},{"path":"https://dd-harp.github.io/pf.memory/articles/Simple_Infections.html","id":"p_mu","dir":"Articles","previous_headings":"","what":"\\(P_\\mu\\)","title":"Parasite Densities in Simple Infections","text":"developed function family compute parasite densities function mean logged parasite densities, \\(\\mu\\)","code":"par(mfrow = c(2,2)) xx = seq(0, 13, by=0.1) plot(xx, dDensityPmu(xx,9), type = \"l\", xlab = expression(x), ylab = \"dDensityPmu\", main = \"dDensityPmu\") lines(xx, dDensityPmu(xx, 7), col = \"darkred\") pp = seq(0,13, by = 0.01) plot(pp, pDensityPmu(pp,9), type = \"l\", xlab = expression(x), ylab = \"pDensityPmu\", main = \"pDensityPmu\") lines(xx, pDensityPmu(xx, 7), col = \"darkred\") hist(rDensityPmu(1000, 9), main = \"rDensityPmu\", xlim = c(0,13)) qq = seq(0.01,.99, length.out=100) plot(qq, qDensityPmu(qq,9), type = \"l\", xlab = expression(x), ylab = \"qDensityPmu\", main = \"qDensityPmu\")"},{"path":"https://dd-harp.github.io/pf.memory/articles/Simple_Infections.html","id":"pxi-alpha","dir":"Articles","previous_headings":"","what":"\\(P(\\xi, \\alpha)\\)","title":"Parasite Densities in Simple Infections","text":"must specify function model exposure:  age five, distribution age infection looks like :  compute parasite density distributions, need construct mesh \\(\\xi.\\) function dDensityPa computes parasite distributions function host age, given function describing history exposure. Now, parasite densities simple infections given distribution mean logged parasite densities.","code":"meshX= seq(0, 13, by=.1) Pmu = dDensityPa(meshX,5*365, foiP3)"},{"path":"https://dd-harp.github.io/pf.memory/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David L. Smith. Author, maintainer. John M. Henry. Author.","code":""},{"path":"https://dd-harp.github.io/pf.memory/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Smith D, Henry J (2024). pf.memory: Probabilistic Approaches Malaria Parasite Infections. R package version 0.1.0, https://dd-harp.github.io/pf.memory/.","code":"@Manual{,   title = {pf.memory: Probabilistic Approaches to Malaria Parasite Infections},   author = {David L. Smith and John M. Henry},   year = {2024},   note = {R package version 0.1.0},   url = {https://dd-harp.github.io/pf.memory/}, }"},{"path":"https://dd-harp.github.io/pf.memory/index.html","id":"pfmemory----the-age-of-infection-immunity--malaria-epidemiology","dir":"","previous_headings":"","what":"Probabilistic Approaches to Malaria Parasite Infections","title":"Probabilistic Approaches to Malaria Parasite Infections","text":"software set computational algorithms implements synthetic approach malaria epidemiology, defined narrowly include exposure bites infective mosquitoes, dynamics infection (including superinfection). epidemiology Plasmodium falciparum malaria presents unique set challenges due complex dynamics infection, immunity, disease infectiousness well treatment chemo-protection, diagnostics detection. Malaria can measured dozen different ways, difficult present simple synthesis malaria infection disease terms metrics commonly used research clinical surveillance. important metric Plasmodium falciparum parasite rate, PfPR, defined average prevalence malaria taken cross-sectional survey. Another metric, often measured covariate research studies, parasite count, number parasites blood slide field counted light microscopist. old data set, collected malariotherapy, parasite counts fluctuated substantially time course infection, strongly statistically correlated age infection AoI (Henry JM, et al., 2022)1. malaria, PfPR several old studies characterstic shape plotted age. patterns also differ diagnostic method, season, sex, location. Parasite densities used correlate disease. many interacting factors, challenge develop model deal everything. One approach studying malaria infection develop mechanistic models dynamics malaria infection within single host. prominent models type OpenMalaria eMod, several others. computational models made possible develope comprehensive individual-based simulation models, IBMs, malaria policy. approaches able replicate patterns, outputs models usually just complex data collected field studies. synthesis malaria epidemiology proven elusive. present computational algorithms support probabilistic approach malaria epidemiology. start semi-Markovian model malaria exposure infection, whose states represented random variables describe multiplicity infection (MoI) host age infection (AoI). Assuming parasite densities , least statistically, predicted AoI, can compute probability distribution functions describing parasite densities, parasite counts, detection individual chosen random population. , present model parasite detection parasite counts. approach extended predict disease, immunity, treatment anti-malarial drugs, brief period chemo-protection. probabilistic approach highly realistic descriptive, goal synthesis. synthesis involves steps: derive variables can track mean MoI, mean AoI moments, probability detection. Hybrid models MoI already exist, show approach can extended systems differential equations track mean higher order moments distribution AoI. new random variable describing age youngest infection (AoY). show variable serves basis computing parasite density distributions complex infections. derive hybrid model variable approximates mean AoY. demonstrate simple system ordinary differential equations can used place probabilistic models compute values research metrics. put another way, can reduce behavior highly complex probabilistic systems simple system equations high degree accuracy. computational conceptual simplicity hybrid models simplicity compartmental models stochastic individual-based models, supporting probabilistic framework, provide sound basis synthesis observational malaria epidemiology.","code":""},{"path":[]},{"path":"https://dd-harp.github.io/pf.memory/reference/Bda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the CDF and PDF of parasite densities in a host cohort — Bda","title":"Compute the CDF and PDF of parasite densities in a host cohort — Bda","text":"Compute CDF PDF parasite densities host cohort","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Bda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the CDF and PDF of parasite densities in a host cohort — Bda","text":"","code":"Bda(   meshX,   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/Bda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the CDF and PDF of parasite densities in a host cohort — Bda","text":"meshX mesh parasite densities host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Bda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the CDF and PDF of parasite densities in a host cohort — Bda","text":"numeric vector length meshX","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — Detect","title":"Detection of infection given parasitemia — Detect","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — Detect","text":"","code":"Detect(xi, a = 0, Cpar = par_nbCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — Detect","text":"xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — Detect","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — Detect.nb","title":"Detection of infection given parasitemia — Detect.nb","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — Detect.nb","text":"","code":"# S3 method for nb Detect(xi, a = 0, Cpar = par_nbCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — Detect.nb","text":"xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — Detect.nb","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — Detect.pois","title":"Detection of infection given parasitemia — Detect.pois","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — Detect.pois","text":"","code":"# S3 method for pois Detect(xi, a = 0, Cpar = par_poisCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — Detect.pois","text":"xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Detect.pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — Detect.pois","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectBda.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — DetectBda","title":"Detection of infection given parasitemia — DetectBda","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectBda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — DetectBda","text":"","code":"DetectBda(   a,   FoIpar,   dx = 0.1,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   pC = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectBda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — DetectBda","text":"host cohort age FoIpar parameters define FoI function dx width mesh hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda pC parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectBda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — DetectBda","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — DetectPM","title":"Detection of infection given parasitemia — DetectPM","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — DetectPM","text":"","code":"DetectPM(   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   pC = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — DetectPM","text":"host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda pC parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — DetectPM","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectPa.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — DetectPa","title":"Detection of infection given parasitemia — DetectPa","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectPa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — DetectPa","text":"","code":"DetectPa(   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   pC = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectPa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — DetectPa","text":"host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda pC parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/DetectPa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — DetectPa","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/FoI.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace Function - Force of Infection — FoI","title":"Trace Function - Force of Infection — FoI","text":"Trace Function - Force Infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/FoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace Function - Force of Infection — FoI","text":"","code":"FoI(a, par, tau = 0, hhat = NULL)"},{"path":"https://dd-harp.github.io/pf.memory/reference/FoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace Function - Force of Infection — FoI","text":"host age par formatted list tau cohort birthday hhat overrides value hbar par","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/FoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace Function - Force of Infection — FoI","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/MoIDistPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the distribution of the MoI at time t — MoIDistPlot","title":"Plot the distribution of the MoI at time t — MoIDistPlot","text":"Plot distribution MoI time t","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/MoIDistPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the distribution of the MoI at time t — MoIDistPlot","text":"","code":"MoIDistPlot(moi, t, clr1 = \"red\")"},{"path":"https://dd-harp.github.io/pf.memory/reference/MoIDistPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the distribution of the MoI at time t — MoIDistPlot","text":"moi mean moi t time clr1 color","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/MoIPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — MoIPM","title":"Detection of infection given parasitemia — MoIPM","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/MoIPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — MoIPM","text":"","code":"MoIPM(   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   pC = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/MoIPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — MoIPM","text":"host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda pC parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/MoIPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — MoIPM","text":"detection probability","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.0.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute immune tracking variables as a function of host age and exposure — Wda.0","title":"Compute immune tracking variables as a function of host age and exposure — Wda.0","text":"Compute immune tracking variables function host age exposure","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute immune tracking variables as a function of host age and exposure — Wda.0","text":"","code":"# S3 method for `0` Wda(a, FoIpar, hhat = NULL, tau = 0, par = par_Wda.0())"},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute immune tracking variables as a function of host age and exposure — Wda.0","text":"age host cohort FoIpar parameters define FoI function hhat overrides value hbar par tau cohort birthday par parameters list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute immune tracking variables as a function of host age and exposure — Wda.0","text":"numeric vector 0's length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute immune tracking variables as a function of host age and exposure — Wda.delta","title":"Compute immune tracking variables as a function of host age and exposure — Wda.delta","text":"Compute immune tracking variables function host age exposure","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute immune tracking variables as a function of host age and exposure — Wda.delta","text":"","code":"# S3 method for delta Wda(a, FoIpar, hhat = NULL, tau = 0, par = par_Wda_delta())"},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute immune tracking variables as a function of host age and exposure — Wda.delta","text":"age host cohort FoIpar parameters define FoI function hhat overrides value hbar par tau cohort birthday par parameters list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute immune tracking variables as a function of host age and exposure — Wda.delta","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute immune tracking variables as a function of host age and exposure — Wda","title":"Compute immune tracking variables as a function of host age and exposure — Wda","text":"function dispatches class(par)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute immune tracking variables as a function of host age and exposure — Wda","text":"","code":"Wda(a, FoIpar, hhat = NULL, tau = 0, par = par_Wda_none())"},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute immune tracking variables as a function of host age and exposure — Wda","text":"age host cohort FoIpar parameters define FoI function hhat overrides value hbar par tau cohort birthday par parameters list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute immune tracking variables as a function of host age and exposure — Wda","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.none.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute immune tracking variables as a function of host age and exposure — Wda.none","title":"Compute immune tracking variables as a function of host age and exposure — Wda.none","text":"Compute immune tracking variables function host age exposure","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.none.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute immune tracking variables as a function of host age and exposure — Wda.none","text":"","code":"# S3 method for none Wda(a, FoIpar, hhat = NULL, tau = 0, par = par_Wda_none())"},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.none.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute immune tracking variables as a function of host age and exposure — Wda.none","text":"age host cohort FoIpar parameters define FoI function hhat overrides value hbar par tau cohort birthday par parameters list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/Wda.none.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute immune tracking variables as a function of host age and exposure — Wda.none","text":"numeric vector 0's length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.flat.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that does not modify the FoI by age — ageFoI.flat","title":"A function that does not modify the FoI by age — ageFoI.flat","text":"function modify FoI age","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that does not modify the FoI by age — ageFoI.flat","text":"","code":"# S3 method for flat ageFoI(a, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.flat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that does not modify the FoI by age — ageFoI.flat","text":"host age par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.flat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that does not modify the FoI by age — ageFoI.flat","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to modify the FoI by age — ageFoI","title":"Functions to modify the FoI by age — ageFoI","text":"method dispatches par.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to modify the FoI by age — ageFoI","text":"","code":"ageFoI(a, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to modify the FoI by age — ageFoI","text":"host age par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to modify the FoI by age — ageFoI","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.type2.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that does not modify the FoI by age — ageFoI.type2","title":"A function that does not modify the FoI by age — ageFoI.type2","text":"function modify FoI age","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.type2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that does not modify the FoI by age — ageFoI.type2","text":"","code":"# S3 method for type2 ageFoI(a, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.type2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that does not modify the FoI by age — ageFoI.type2","text":"host age par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/ageFoI.type2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that does not modify the FoI by age — ageFoI.type2","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.0.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.0","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.0","text":"Compute mean log10 parasites model immunity","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.0","text":"","code":"# S3 method for `0` alpha2mu(alpha, W, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.0","text":"alpha age parasite infection W immune tracking variables par list defines model","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.0","text":"mean log10 parasite densities","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.W.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.W","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.W","text":"Compute mean log10 parasites model immunity","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.W.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.W","text":"","code":"# S3 method for W alpha2mu(alpha, W, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.W.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.W","text":"alpha age parasite infection W immune tracking variables par list defines model","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.W.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.W","text":"mean log10 parasite densities","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.base.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.base","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.base","text":"Compute mean log10 parasites model immunity","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.base","text":"","code":"# S3 method for base alpha2mu(alpha, W, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.base","text":"alpha age parasite infection W immune tracking variables par list defines model","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute expected log10 parasite densities, mu, as a function of the age of infection alpha — alpha2mu.base","text":"mean log10 parasite densities","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mean, expected parasite densities mu as a function of the age of infection alpha — alpha2mu","title":"Compute mean, expected parasite densities mu as a function of the age of infection alpha — alpha2mu","text":"Compute mean, expected parasite densities mu function age infection alpha","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mean, expected parasite densities mu as a function of the age of infection alpha — alpha2mu","text":"","code":"alpha2mu(alpha, W, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mean, expected parasite densities mu as a function of the age of infection alpha — alpha2mu","text":"alpha age parasite infection W immune tracking variables par list defines model","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/alpha2mu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mean, expected parasite densities mu as a function of the age of infection alpha — alpha2mu","text":"mean log10 parasite densities, numeric vector length(alpha)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — binnedCounts","title":"Detection of infection given parasitemia — binnedCounts","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — binnedCounts","text":"","code":"binnedCounts(xi, a, bins, Cpar = par_nbCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — binnedCounts","text":"xi mean log10 parasite densities host cohort age bins breakpoints summarizing outputs Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — binnedCounts","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — binnedCounts.nb","title":"Detection of infection given parasitemia — binnedCounts.nb","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — binnedCounts.nb","text":"","code":"# S3 method for nb binnedCounts(xi, a, bins, Cpar = par_nbCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — binnedCounts.nb","text":"xi mean log10 parasite densities host cohort age bins break points binning data Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — binnedCounts.nb","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — binnedCounts.pois","title":"Detection of infection given parasitemia — binnedCounts.pois","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — binnedCounts.pois","text":"","code":"# S3 method for pois binnedCounts(xi, a, bins, Cpar = par_poisCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — binnedCounts.pois","text":"xi mean log10 parasite densities host cohort age bins breakpoints binning data Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/binnedCounts.pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — binnedCounts.pois","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for the sum of two infections — cdfConvolve2","title":"The density function for the sum of two infections — cdfConvolve2","text":"density function sum two infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for the sum of two infections — cdfConvolve2","text":"","code":"cdfConvolve2(meshX, CDF1, CDF2)"},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for the sum of two infections — cdfConvolve2","text":"meshX mesh host cohort ages CDF1 CDF complex distribution CDF2 CDF complex distribution","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for the sum of two infections — cdfConvolve2","text":"numeric vector length(meshX)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2a.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for the sum of two infections, method b — cdfConvolve2a","title":"The density function for the sum of two infections, method b — cdfConvolve2a","text":"density function sum two infections, method b","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2a.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for the sum of two infections, method b — cdfConvolve2a","text":"","code":"cdfConvolve2a(meshX, CDF1, CDF2)"},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2a.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for the sum of two infections, method b — cdfConvolve2a","text":"meshX mesh host cohort ages CDF1 CDF complex distribution CDF2 CDF complex distribution","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2a.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for the sum of two infections, method b — cdfConvolve2a","text":"numeric vector length(meshX)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2b.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for the sum of two infections, method a — cdfConvolve2b","title":"The density function for the sum of two infections, method a — cdfConvolve2b","text":"density function sum two infections, method ","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for the sum of two infections, method a — cdfConvolve2b","text":"","code":"cdfConvolve2b(meshX, CDF1, CDF2)"},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for the sum of two infections, method a — cdfConvolve2b","text":"meshX mesh host cohort ages CDF1 CDF complex distribution CDF2 CDF complex distribution","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/cdfConvolve2b.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for the sum of two infections, method a — cdfConvolve2b","text":"numeric vector length(meshX)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoI.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for the age of infection (AoI) — dAoI","title":"The density function for the age of infection (AoI) — dAoI","text":"density function age infection (AoI)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for the age of infection (AoI) — dAoI","text":"","code":"dAoI(alpha, a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for the age of infection (AoI) — dAoI","text":"alpha parasite age infection host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for the age of infection (AoI) — dAoI","text":"numeric vector length(alpha)","code":""},{"path":[]},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoIda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the derivatives of the AoI moments dynamically — dAoIda","text":"","code":"dAoIda(a, M, p, FoIpar)"},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoIda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the derivatives of the AoI moments dynamically — dAoIda","text":"host age M state variables p parameters FoIpar parameters define FoI function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoIda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the derivatives of the AoI moments dynamically — dAoIda","text":"derivatives MoI AoI list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoY.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for the age of the youngest infection (AoY) — dAoY","title":"The density function for the age of the youngest infection (AoY) — dAoY","text":"density function age youngest infection (AoY)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for the age of the youngest infection (AoY) — dAoY","text":"","code":"dAoY(alpha, a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for the age of the youngest infection (AoY) — dAoY","text":"alpha age infection age cohort FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for the age of the youngest infection (AoY) — dAoY","text":"numeric vector length(alpha)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoYN.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for the youngest age of N infections — dAoYN","title":"The density function for the youngest age of N infections — dAoYN","text":"density function youngest age N infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoYN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for the youngest age of N infections — dAoYN","text":"","code":"dAoYN(N, a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoYN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for the youngest age of N infections — dAoYN","text":"N number infections age cohort FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoYN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for the youngest age of N infections — dAoYN","text":"numeric vector length + 1","code":""},{"path":[]},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoYda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the derivatives of the approximate moments of the AoY dynamically — dAoYda","text":"","code":"dAoYda(a, vars, pars, FoIpar)"},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoYda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the derivatives of the approximate moments of the AoY dynamically — dAoYda","text":"host age vars state variables pars parameters FoIpar parameters define FoI function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dAoYda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the derivatives of the approximate moments of the AoY dynamically — dAoYda","text":"derivatives MoI AoI list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dBda.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for parasite densities in a host cohort — dBda","title":"The density function for parasite densities in a host cohort — dBda","text":"density function parasite densities host cohort","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dBda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for parasite densities in a host cohort — dBda","text":"","code":"dBda(   meshX,   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/dBda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for parasite densities in a host cohort — dBda","text":"meshX mesh parasite densities host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dBda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for parasite densities in a host cohort — dBda","text":"numeric vector length meshX","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"density function of counts — dCounts","title":"density function of counts — dCounts","text":"density function counts","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"density function of counts — dCounts","text":"","code":"dCounts(hatxi, xi, a = 0, Cpar = par_nbCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"density function of counts — dCounts","text":"hatxi mean log10 parasite counts xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"density function of counts — dCounts","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — dCounts.nb","title":"Detection of infection given parasitemia — dCounts.nb","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — dCounts.nb","text":"","code":"# S3 method for nb dCounts(hatxi, xi, a = 0, Cpar = par_nbCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — dCounts.nb","text":"hatxi mean log10 parasite counts xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — dCounts.nb","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — dCounts.pois","title":"Detection of infection given parasitemia — dCounts.pois","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — dCounts.pois","text":"","code":"# S3 method for pois dCounts(hatxi, xi, a = 0, Cpar = par_poisCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — dCounts.pois","text":"hatxi mean log10 parasite densities xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCounts.pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — dCounts.pois","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCountsBa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the density of parasite counts in complex infections — dCountsBa","title":"Compute the density of parasite counts in complex infections — dCountsBa","text":"Compute density parasite counts complex infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCountsBa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the density of parasite counts in complex infections — dCountsBa","text":"","code":"dCountsBa(   a,   FoIpar,   bins = NULL,   dx = 0.1,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   Cpar = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/dCountsBa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the density of parasite counts in complex infections — dCountsBa","text":"host cohort age FoIpar parameters define FoI function bins set break points computing counts dx width mesh computing CDF parasite densities hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma pWda parameters dispatch Wda Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCountsBa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the density of parasite counts in complex infections — dCountsBa","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCountsPa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the density of parasite counts for simple infections — dCountsPa","title":"Compute the density of parasite counts for simple infections — dCountsPa","text":"Compute density parasite counts simple infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCountsPa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the density of parasite counts for simple infections — dCountsPa","text":"","code":"dCountsPa(   a,   FoIpar,   bins = NULL,   dx = 0.1,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   Cpar = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/dCountsPa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the density of parasite counts for simple infections — dCountsPa","text":"host cohort age FoIpar parameters define FoI function bins set break points computing counts dx width mesh computing CDF parasite densities hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma pWda parameters dispatch Wda Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dCountsPa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the density of parasite counts for simple infections — dCountsPa","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPa.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for parasite densities from a host cohort population of age a — dDensityPa","title":"The density function for parasite densities from a host cohort population of age a — dDensityPa","text":"density function parasite densities host cohort population age ","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for parasite densities from a host cohort population of age a — dDensityPa","text":"","code":"dDensityPa(   x,   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for parasite densities from a host cohort population of age a — dDensityPa","text":"x host cohort age host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for parasite densities from a host cohort population of age a — dDensityPa","text":"numeric vector length(x)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPaConvolve2.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for the sum of two infections — dDensityPaConvolve2","title":"The density function for the sum of two infections — dDensityPaConvolve2","text":"density function sum two infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPaConvolve2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for the sum of two infections — dDensityPaConvolve2","text":"","code":"dDensityPaConvolve2(   x,   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPaConvolve2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for the sum of two infections — dDensityPaConvolve2","text":"x host cohort age host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPaConvolve2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for the sum of two infections — dDensityPaConvolve2","text":"numeric value","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPalpha.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for parasite densities in a simple malaria infection of age alpha — dDensityPalpha","title":"The density function for parasite densities in a simple malaria infection of age alpha — dDensityPalpha","text":"density function parasite densities simple malaria infection age alpha","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPalpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for parasite densities in a simple malaria infection of age alpha — dDensityPalpha","text":"","code":"dDensityPalpha(   x,   alpha,   W = 0,   a = 0,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPalpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for parasite densities in a simple malaria infection of age alpha — dDensityPalpha","text":"x vector quantiles alpha age parasite infection W immune tracking variables host cohort age pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPalpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for parasite densities in a simple malaria infection of age alpha — dDensityPalpha","text":"numeric vector length(x)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPmu.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for parasite densities in a simple malaria infection — dDensityPmu","title":"The density function for parasite densities in a simple malaria infection — dDensityPmu","text":"density function parasite densities simple malaria infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPmu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for parasite densities in a simple malaria infection — dDensityPmu","text":"","code":"dDensityPmu(xi, mu, a = 0, pRBC = par_lRBC_static(), pSig = par_sigma_abc())"},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPmu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for parasite densities in a simple malaria infection — dDensityPmu","text":"xi vector quantiles mu expected value log10 parasite densities host cohort age pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dDensityPmu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for parasite densities in a simple malaria infection — dDensityPmu","text":"numeric vector length(xi)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dMoIda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the first derivatives for the queuing model M/M/infinity — dMoIda","title":"Compute the first derivatives for the queuing model M/M/infinity — dMoIda","text":"Compute first derivatives queuing model M/M/infinity","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dMoIda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the first derivatives for the queuing model M/M/infinity — dMoIda","text":"","code":"dMoIda(a, M, p, FoIpar)"},{"path":"https://dd-harp.github.io/pf.memory/reference/dMoIda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the first derivatives for the queuing model M/M/infinity — dMoIda","text":"host age M state variables p parameters FoIpar parameters define FoI function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dMoIda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the first derivatives for the queuing model M/M/infinity — dMoIda","text":"derivatives list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dbeta1.html","id":null,"dir":"Reference","previous_headings":"","what":"Density function for the beta distribution, an alternative parameterization — dbeta1","title":"Density function for the beta distribution, an alternative parameterization — dbeta1","text":"beta distribution parameterized using mean function sigma_mu computes variance function mean","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dbeta1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Density function for the beta distribution, an alternative parameterization — dbeta1","text":"","code":"dbeta1(x, mu, pSig = par_sigma_abc())"},{"path":"https://dd-harp.github.io/pf.memory/reference/dbeta1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Density function for the beta distribution, an alternative parameterization — dbeta1","text":"x vector quantiles mu mean value distribution (0 <= mu <= 1) pSig parameters dispatch S3 function sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dbeta1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Density function for the beta distribution, an alternative parameterization — dbeta1","text":"numeric vector length(x)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dmda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the derivatives for MoI using a hybrid model — dmda","title":"Compute the derivatives for MoI using a hybrid model — dmda","text":"Compute derivatives MoI using hybrid model","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dmda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the derivatives for MoI using a hybrid model — dmda","text":"","code":"dmda(a, M, p, FoIpar)"},{"path":"https://dd-harp.github.io/pf.memory/reference/dmda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the derivatives for MoI using a hybrid model — dmda","text":"host age M state variables p parameters FoIpar parameters define FoI function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dmda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the derivatives for MoI using a hybrid model — dmda","text":"derivatives list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dpda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the derivatives for MoI and true PR — dpda","title":"Compute the derivatives for MoI and true PR — dpda","text":"Compute derivatives MoI true PR","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dpda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the derivatives for MoI and true PR — dpda","text":"","code":"dpda(a, M, par, FoIpar)"},{"path":"https://dd-harp.github.io/pf.memory/reference/dpda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the derivatives for MoI and true PR — dpda","text":"host age M state variables par model parameters FoIpar parameters define FoI function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/dpda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the derivatives for MoI and true PR — dpda","text":"derivatives, list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.0.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log10 of the red blood cell population — log10RBC.0","title":"Compute log10 of the red blood cell population — log10RBC.0","text":"static model","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log10 of the red blood cell population — log10RBC.0","text":"","code":"# S3 method for `0` log10RBC(a, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log10 of the red blood cell population — log10RBC.0","text":"age host cohort par list parameters","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log10 of the red blood cell population — log10RBC.0","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log10 of the red blood cell population — log10RBC","title":"Compute log10 of the red blood cell population — log10RBC","text":"Compute log10 red blood cell population","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log10 of the red blood cell population — log10RBC","text":"","code":"log10RBC(a, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log10 of the red blood cell population — log10RBC","text":"age host cohort par list parameters","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log10 of the red blood cell population — log10RBC","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.static.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute log10 of the red blood cell population — log10RBC.static","title":"Compute log10 of the red blood cell population — log10RBC.static","text":"static model","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute log10 of the red blood cell population — log10RBC.static","text":"","code":"# S3 method for static log10RBC(a, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute log10 of the red blood cell population — log10RBC.static","text":"age host cohort par list parameters","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/log10RBC.static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute log10 of the red blood cell population — log10RBC.static","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/make_FoI.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace Function - Force of Infection — make_FoI","title":"Trace Function - Force of Infection — make_FoI","text":"Trace Function - Force Infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/make_FoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace Function - Force of Infection — make_FoI","text":"","code":"make_FoI(par, maxAge = 50)"},{"path":"https://dd-harp.github.io/pf.memory/reference/make_FoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace Function - Force of Infection — make_FoI","text":"par formatted list maxAge age years normalize ","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/make_FoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace Function - Force of Infection — make_FoI","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanCountsBa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean parasite counts in complex infections — meanCountsBa","title":"Compute the mean parasite counts in complex infections — meanCountsBa","text":"Compute mean parasite counts complex infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanCountsBa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean parasite counts in complex infections — meanCountsBa","text":"","code":"meanCountsBa(   a,   FoIpar,   dx = 0.1,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   Cpar = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/meanCountsBa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean parasite counts in complex infections — meanCountsBa","text":"host cohort age FoIpar parameters define FoI function dx width mesh computing CDF parasite densities hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma pWda parameters dispatch Wda Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanCountsBa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean parasite counts in complex infections — meanCountsBa","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanCountsPa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean parasite counts in simple infections — meanCountsPa","title":"Compute the mean parasite counts in simple infections — meanCountsPa","text":"Compute mean parasite counts simple infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanCountsPa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean parasite counts in simple infections — meanCountsPa","text":"","code":"meanCountsPa(   a,   FoIpar,   dx = 0.1,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   Cpar = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/meanCountsPa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean parasite counts in simple infections — meanCountsPa","text":"host cohort age FoIpar parameters define FoI function dx width mesh computing CDF parasite densities hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma pWda parameters dispatch Wda Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanCountsPa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean parasite counts in simple infections — meanCountsPa","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanMoI.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the mean MoI directly — meanMoI","title":"Compute the mean MoI directly — meanMoI","text":"Compute mean MoI directly","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanMoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the mean MoI directly — meanMoI","text":"","code":"meanMoI(a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/meanMoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the mean MoI directly — meanMoI","text":"host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/meanMoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the mean MoI directly — meanMoI","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/momentAoI.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the moments for the AoI density function for a cohort of age a — momentAoI","title":"Compute the moments for the AoI density function for a cohort of age a — momentAoI","text":"Compute moments AoI density function cohort age ","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/momentAoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the moments for the AoI density function for a cohort of age a — momentAoI","text":"","code":"momentAoI(a, FoIpar, hhat = 5/365, tau = 0, r = 1/200, n = 1)"},{"path":"https://dd-harp.github.io/pf.memory/reference/momentAoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the moments for the AoI density function for a cohort of age a — momentAoI","text":"host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection n moment desired","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/momentAoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the moments for the AoI density function for a cohort of age a — momentAoI","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/momentAoY.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the moments for the AoI density function for a cohort of age a — momentAoY","title":"Compute the moments for the AoI density function for a cohort of age a — momentAoY","text":"Compute moments AoI density function cohort age ","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/momentAoY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the moments for the AoI density function for a cohort of age a — momentAoY","text":"","code":"momentAoY(a, FoIpar, hhat = 5/365, tau = 0, r = 1/200, n = 1)"},{"path":"https://dd-harp.github.io/pf.memory/reference/momentAoY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the moments for the AoI density function for a cohort of age a — momentAoY","text":"host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection n moment desired","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/momentAoY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the moments for the AoI density function for a cohort of age a — momentAoY","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/nzPois.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute N non-zero values from a Poisson distribution with a given MoI — nzPois","title":"Compute N non-zero values from a Poisson distribution with a given MoI — nzPois","text":"Compute N non-zero values Poisson distribution given MoI","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/nzPois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute N non-zero values from a Poisson distribution with a given MoI — nzPois","text":"","code":"nzPois(N, moi)"},{"path":"https://dd-harp.github.io/pf.memory/reference/nzPois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute N non-zero values from a Poisson distribution with a given MoI — nzPois","text":"N number random variates return moi mean moi","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/nzPois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute N non-zero values from a Poisson distribution with a given MoI — nzPois","text":"numeric vector length N","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoI.html","id":null,"dir":"Reference","previous_headings":"","what":"The distribution function for the age of infection (AoI) — pAoI","title":"The distribution function for the age of infection (AoI) — pAoI","text":"distribution function age infection (AoI)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The distribution function for the age of infection (AoI) — pAoI","text":"","code":"pAoI(alpha, a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The distribution function for the age of infection (AoI) — pAoI","text":"alpha parasite age infection host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The distribution function for the age of infection (AoI) — pAoI","text":"numeric vector length(alpha)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoY.html","id":null,"dir":"Reference","previous_headings":"","what":"The distribution function for the age of the youngest infection (AoY) — pAoY","title":"The distribution function for the age of the youngest infection (AoY) — pAoY","text":"distribution function age youngest infection (AoY)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The distribution function for the age of the youngest infection (AoY) — pAoY","text":"","code":"pAoY(alpha, a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The distribution function for the age of the youngest infection (AoY) — pAoY","text":"alpha age infection age cohort FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The distribution function for the age of the youngest infection (AoY) — pAoY","text":"numeric vector length(alpha)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoYN.html","id":null,"dir":"Reference","previous_headings":"","what":"The distribution function for the youngest age of N infections — pAoYN","title":"The distribution function for the youngest age of N infections — pAoYN","text":"distribution function youngest age N infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoYN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The distribution function for the youngest age of N infections — pAoYN","text":"","code":"pAoYN(N, a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoYN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The distribution function for the youngest age of N infections — pAoYN","text":"N MoI age cohort FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoYN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The distribution function for the youngest age of N infections — pAoYN","text":"numeric vector length + 1","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoY_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Alternative method for computing the distribution function for the age of the youngest infection (AoY) — pAoY_long","title":"Alternative method for computing the distribution function for the age of the youngest infection (AoY) — pAoY_long","text":"method computes distribution function AoY summing AoI distributions","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoY_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Alternative method for computing the distribution function for the age of the youngest infection (AoY) — pAoY_long","text":"","code":"pAoY_long(alpha, a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoY_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Alternative method for computing the distribution function for the age of the youngest infection (AoY) — pAoY_long","text":"alpha age infection age cohort FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pAoY_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Alternative method for computing the distribution function for the age of the youngest infection (AoY) — pAoY_long","text":"numeric vector length(alpha)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pBda.html","id":null,"dir":"Reference","previous_headings":"","what":"The distribution function for parasite densities in a host cohort — pBda","title":"The distribution function for parasite densities in a host cohort — pBda","text":"distribution function parasite densities host cohort","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pBda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The distribution function for parasite densities in a host cohort — pBda","text":"","code":"pBda(   meshX,   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/pBda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The distribution function for parasite densities in a host cohort — pBda","text":"meshX mesh parasite densities host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pBda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The distribution function for parasite densities in a host cohort — pBda","text":"numeric vector length meshX","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"cumulative density function of counts — pCounts","title":"cumulative density function of counts — pCounts","text":"cumulative density function counts","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cumulative density function of counts — pCounts","text":"","code":"pCounts(hatxi, xi, a = 0, Cpar = par_nbCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"cumulative density function of counts — pCounts","text":"hatxi mean log10 parasite densities xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"cumulative density function of counts — pCounts","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — pCounts.nb","title":"Detection of infection given parasitemia — pCounts.nb","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — pCounts.nb","text":"","code":"# S3 method for nb pCounts(hatxi, xi, a = 0, Cpar = par_nbCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — pCounts.nb","text":"hatxi mean log10 parasite counts xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — pCounts.nb","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.pois.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — pCounts.pois","title":"Detection of infection given parasitemia — pCounts.pois","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.pois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — pCounts.pois","text":"","code":"# S3 method for pois pCounts(hatxi, xi, a = 0, Cpar = par_poisCounts())"},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.pois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — pCounts.pois","text":"hatxi mean log10 parasite counts xi mean log10 parasite densities host cohort age Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCounts.pois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — pCounts.pois","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCountsBa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the distribution of parasite counts in complex infections — pCountsBa","title":"Compute the distribution of parasite counts in complex infections — pCountsBa","text":"Compute distribution parasite counts complex infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCountsBa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the distribution of parasite counts in complex infections — pCountsBa","text":"","code":"pCountsBa(   a,   FoIpar,   bins = NULL,   dx = 0.1,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   Cpar = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/pCountsBa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the distribution of parasite counts in complex infections — pCountsBa","text":"host cohort age FoIpar parameters define FoI function bins set break points computing counts dx width mesh computing CDF parasite densities hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma pWda parameters dispatch Wda Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCountsBa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the distribution of parasite counts in complex infections — pCountsBa","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCountsPa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the distribution of parasite counts for simple infections — pCountsPa","title":"Compute the distribution of parasite counts for simple infections — pCountsPa","text":"Compute distribution parasite counts simple infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCountsPa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the distribution of parasite counts for simple infections — pCountsPa","text":"","code":"pCountsPa(   a,   FoIpar,   bins = NULL,   dx = 0.1,   hhat = NULL,   tau = 0,   r = 1/200,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none(),   Cpar = par_nbCounts() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/pCountsPa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the distribution of parasite counts for simple infections — pCountsPa","text":"host cohort age FoIpar parameters define FoI function bins set break points computing counts dx width mesh computing CDF parasite densities hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma pWda parameters dispatch Wda Cpar parameters define detection function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pCountsPa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the distribution of parasite counts for simple infections — pCountsPa","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pDensityPalpha.html","id":null,"dir":"Reference","previous_headings":"","what":"The distribution function for parasite densities in a simple malaria infection of age alpha — pDensityPalpha","title":"The distribution function for parasite densities in a simple malaria infection of age alpha — pDensityPalpha","text":"distribution function parasite densities simple malaria infection age alpha","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pDensityPalpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The distribution function for parasite densities in a simple malaria infection of age alpha — pDensityPalpha","text":"","code":"pDensityPalpha(   x,   alpha,   W = 0,   a = 0,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/pDensityPalpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The distribution function for parasite densities in a simple malaria infection of age alpha — pDensityPalpha","text":"x vector probabilities alpha age parasite infection W immune tracking variables host cohort age pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pDensityPalpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The distribution function for parasite densities in a simple malaria infection of age alpha — pDensityPalpha","text":"numeric vector length(x)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pDensityPmu.html","id":null,"dir":"Reference","previous_headings":"","what":"The density function for parasite densities as a function of the mean — pDensityPmu","title":"The density function for parasite densities as a function of the mean — pDensityPmu","text":"density function parasite densities function mean","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pDensityPmu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The density function for parasite densities as a function of the mean — pDensityPmu","text":"","code":"pDensityPmu(xi, mu, a = 0, pRBC = par_lRBC_static(), pSig = par_sigma_abc())"},{"path":"https://dd-harp.github.io/pf.memory/reference/pDensityPmu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The density function for parasite densities as a function of the mean — pDensityPmu","text":"xi vector probabilities mu expected value log10 parasite densities host cohort age pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pDensityPmu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The density function for parasite densities as a function of the mean — pDensityPmu","text":"numeric vector length(xi)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda.0.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a parameter set for Wda.0 — par_Wda.0","title":"Make a parameter set for Wda.0 — par_Wda.0","text":"Make parameter set Wda.0","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda.0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a parameter set for Wda.0 — par_Wda.0","text":"","code":"par_Wda.0()"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda.0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a parameter set for Wda.0 — par_Wda.0","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda.delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a parameter set for Wda.delta — par_Wda.delta","title":"Make a parameter set for Wda.delta — par_Wda.delta","text":"Make parameter set Wda.delta","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda.delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a parameter set for Wda.delta — par_Wda.delta","text":"","code":"par_Wda.delta(delta = 0.001)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda.delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a parameter set for Wda.delta — par_Wda.delta","text":"delta decay rate","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda.delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a parameter set for Wda.delta — par_Wda.delta","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda_delta.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a parameter set for Wda.none — par_Wda_delta","title":"Make a parameter set for Wda.none — par_Wda_delta","text":"Make parameter set Wda.none","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda_delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a parameter set for Wda.none — par_Wda_delta","text":"","code":"par_Wda_delta(delta = 0.001)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda_delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a parameter set for Wda.none — par_Wda_delta","text":"delta decay rate","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda_delta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a parameter set for Wda.none — par_Wda_delta","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda_none.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a parameter set for Wda.none — par_Wda_none","title":"Make a parameter set for Wda.none — par_Wda_none","text":"Make parameter set Wda.none","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda_none.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a parameter set for Wda.none — par_Wda_none","text":"","code":"par_Wda_none()"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_Wda_none.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a parameter set for Wda.none — par_Wda_none","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu.0.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for alpha2mu.0 — par_alpha2mu.0","title":"Set up parameters for alpha2mu.0 — par_alpha2mu.0","text":"Set parameters alpha2mu.0","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu.0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for alpha2mu.0 — par_alpha2mu.0","text":"","code":"par_alpha2mu.0(D = 20, liver = 7, tildeb = 10.3, tildel = 2, Sa = 0.0033)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu.0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for alpha2mu.0 — par_alpha2mu.0","text":"D age infection (days) parasite densities peak liver age infection (days) parasites emerge liver tildeb maximum expected log10 parasite densities tildel minimum expected log10 parasite densities Sa decline mu respect alpha","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu.0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for alpha2mu.0 — par_alpha2mu.0","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu.W.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for alpha2mu.W — par_alpha2mu.W","title":"Set up parameters for alpha2mu.W — par_alpha2mu.W","text":"Set parameters alpha2mu.W","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu.W.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for alpha2mu.W — par_alpha2mu.W","text":"","code":"par_alpha2mu.W(   D = 20,   liver = 7,   tildeb = 10.3,   tildel = 2,   Sa = 0.0033,   Sw = 0.001 )"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu.W.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for alpha2mu.W — par_alpha2mu.W","text":"D age infection (days) parasite densities peak liver age infection (days) parasites emerge liver tildeb maximum expected log10 parasite densities tildel minimum expected log10 parasite densities Sa decline mu respect alpha Sw decline mu respect immunity","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu.W.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for alpha2mu.W — par_alpha2mu.W","text":"mean log10 parasite densities","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu_base.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for alpha2mu.base — par_alpha2mu_base","title":"Set up parameters for alpha2mu.base — par_alpha2mu_base","text":"Set parameters alpha2mu.base","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu_base.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for alpha2mu.base — par_alpha2mu_base","text":"","code":"par_alpha2mu_base(D = 20, liver = 7, tildeb = 10.3, tildel = 2, Sa = 0.0033)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu_base.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for alpha2mu.base — par_alpha2mu_base","text":"D age infection (days) parasite densities peak liver age infection (days) parasites emerge liver tildeb maximum expected log10 parasite densities tildel minimum expected log10 parasite densities Sa decline mu respect alpha","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_alpha2mu_base.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for alpha2mu.base — par_alpha2mu_base","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_expSeason.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list to dispatch seasonalFoI.exp — par_expSeason","title":"Return a list to dispatch seasonalFoI.exp — par_expSeason","text":"Return list dispatch seasonalFoI.exp","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_expSeason.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list to dispatch seasonalFoI.exp — par_expSeason","text":"","code":"par_expSeason(phase = 0, pwr = 1, lift = 0, shift = 0)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_expSeason.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a list to dispatch seasonalFoI.exp — par_expSeason","text":"phase shift phase / time year pwr raise seasonal pattern power lift amplitude shift shift everything ","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_expSeason.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list to dispatch seasonalFoI.exp — par_expSeason","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a parameter list to dispatch ageFoI.flat — par_flatAge","title":"Make a parameter list to dispatch ageFoI.flat — par_flatAge","text":"Make parameter list dispatch ageFoI.flat","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a parameter list to dispatch ageFoI.flat — par_flatAge","text":"","code":"par_flatAge()"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a parameter list to dispatch ageFoI.flat — par_flatAge","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatSeason.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list that dispatches seasonalFoI.flat — par_flatSeason","title":"Return a list that dispatches seasonalFoI.flat — par_flatSeason","text":"Return list dispatches seasonalFoI.flat","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatSeason.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list that dispatches seasonalFoI.flat — par_flatSeason","text":"","code":"par_flatSeason()"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatSeason.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list that dispatches seasonalFoI.flat — par_flatSeason","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatTrend.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list that dispatches trendFoI.flat — par_flatTrend","title":"Return a list that dispatches trendFoI.flat — par_flatTrend","text":"Return list dispatches trendFoI.flat","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatTrend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list that dispatches trendFoI.flat — par_flatTrend","text":"","code":"par_flatTrend()"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_flatTrend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list that dispatches trendFoI.flat — par_flatTrend","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_lRBC.0.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for log10RBC.0 — par_lRBC.0","title":"Set up parameters for log10RBC.0 — par_lRBC.0","text":"Set parameters log10RBC.0","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_lRBC.0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for log10RBC.0 — par_lRBC.0","text":"","code":"par_lRBC.0(lRBCmax = 13)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_lRBC.0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for log10RBC.0 — par_lRBC.0","text":"lRBCmax maximum","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_lRBC.0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for log10RBC.0 — par_lRBC.0","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_lRBC_static.html","id":null,"dir":"Reference","previous_headings":"","what":"Set up parameters for log10RBC.static — par_lRBC_static","title":"Set up parameters for log10RBC.static — par_lRBC_static","text":"Set parameters log10RBC.static","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_lRBC_static.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set up parameters for log10RBC.static — par_lRBC_static","text":"","code":"par_lRBC_static(lRBCmax = 13)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_lRBC_static.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set up parameters for log10RBC.static — par_lRBC_static","text":"lRBCmax maximum","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_lRBC_static.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set up parameters for log10RBC.static — par_lRBC_static","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_nbCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — par_nbCounts","title":"Detection of infection given parasitemia — par_nbCounts","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_nbCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — par_nbCounts","text":"","code":"par_nbCounts(q = 6, sz = 0.31, bvm = par_lRBC_static())"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_nbCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — par_nbCounts","text":"q fraction blood examined sz negative binomial size parameter bvm blood volume log10 red blood cells","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_nbCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — par_nbCounts","text":"binary detection result","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_poisCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Detection of infection given parasitemia — par_poisCounts","title":"Detection of infection given parasitemia — par_poisCounts","text":"Detection infection given parasitemia","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_poisCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detection of infection given parasitemia — par_poisCounts","text":"","code":"par_poisCounts(q = 6, bvm = par_lRBC_static())"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_poisCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detection of infection given parasitemia — par_poisCounts","text":"q fraction blood volume sampled bvm blood volume log10 red blood cells","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_poisCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detection of infection given parasitemia — par_poisCounts","text":"par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sigma.0.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters to configure sigma.0 — par_sigma.0","title":"Parameters to configure sigma.0 — par_sigma.0","text":"Parameters configure sigma.0","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sigma.0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters to configure sigma.0 — par_sigma.0","text":"","code":"par_sigma.0(aa = 3.11, bb = 2.14, cc = 1.74)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sigma.0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters to configure sigma.0 — par_sigma.0","text":"aa shape parameter bb shape parameter cc shape parameter","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sigma.0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters to configure sigma.0 — par_sigma.0","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sigma_abc.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters to configure sigma_mu.abc — par_sigma_abc","title":"Parameters to configure sigma_mu.abc — par_sigma_abc","text":"Parameters configure sigma_mu.abc","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sigma_abc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters to configure sigma_mu.abc — par_sigma_abc","text":"","code":"par_sigma_abc(aa = 3.11, bb = 2.14, cc = 1.74)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sigma_abc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters to configure sigma_mu.abc — par_sigma_abc","text":"aa shape parameter bb shape parameter cc shape parameter","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sigma_abc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters to configure sigma_mu.abc — par_sigma_abc","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sinSeason.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a list to configure and dispatch seasonalFoI.sin — par_sinSeason","title":"Return a list to configure and dispatch seasonalFoI.sin — par_sinSeason","text":"Return list configure dispatch seasonalFoI.sin","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sinSeason.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a list to configure and dispatch seasonalFoI.sin — par_sinSeason","text":"","code":"par_sinSeason(phase = 0, pwr = 1, lift = 0, shift = 0)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sinSeason.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a list to configure and dispatch seasonalFoI.sin — par_sinSeason","text":"phase shift phase / time year pwr raise seasonal pattern power lift amplitude shift shift everything ","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_sinSeason.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a list to configure and dispatch seasonalFoI.sin — par_sinSeason","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_type2Age.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a parameter list to dispatch ageFoI.type2 — par_type2Age","title":"Make a parameter list to dispatch ageFoI.type2 — par_type2Age","text":"Make parameter list dispatch ageFoI.type2","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_type2Age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a parameter list to dispatch ageFoI.type2 — par_type2Age","text":"","code":"par_type2Age(shift = 0.1, A = 1.5, B = 2)"},{"path":"https://dd-harp.github.io/pf.memory/reference/par_type2Age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a parameter list to dispatch ageFoI.type2 — par_type2Age","text":"shift shape parameter shape parameter B age weight adults","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/par_type2Age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a parameter list to dispatch ageFoI.type2 — par_type2Age","text":"list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pbeta1.html","id":null,"dir":"Reference","previous_headings":"","what":"Disribution function for the beta distribution, an alternative parameterization — pbeta1","title":"Disribution function for the beta distribution, an alternative parameterization — pbeta1","text":"Disribution function beta distribution, alternative parameterization","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pbeta1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disribution function for the beta distribution, an alternative parameterization — pbeta1","text":"","code":"pbeta1(p, mu, pSig = par_sigma_abc())"},{"path":"https://dd-harp.github.io/pf.memory/reference/pbeta1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disribution function for the beta distribution, an alternative parameterization — pbeta1","text":"p vector probabilities mu mean value distribution (0 <= mu <= 1) pSig parameters dispatch S3 function sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/pbeta1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disribution function for the beta distribution, an alternative parameterization — pbeta1","text":"numeric vector length(p)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qDensityPalpha.html","id":null,"dir":"Reference","previous_headings":"","what":"The quantile function for parasite densities in a simple malaria infection of age alpha — qDensityPalpha","title":"The quantile function for parasite densities in a simple malaria infection of age alpha — qDensityPalpha","text":"quantile function parasite densities simple malaria infection age alpha","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qDensityPalpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The quantile function for parasite densities in a simple malaria infection of age alpha — qDensityPalpha","text":"","code":"qDensityPalpha(   x,   alpha,   W = 0,   a = 0,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/qDensityPalpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The quantile function for parasite densities in a simple malaria infection of age alpha — qDensityPalpha","text":"x vector quantiles alpha age parasite infection W immune tracking variables host cohort age pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qDensityPalpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The quantile function for parasite densities in a simple malaria infection of age alpha — qDensityPalpha","text":"numeric vector length(x)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qDensityPmu.html","id":null,"dir":"Reference","previous_headings":"","what":"The quantile function for parasite densities in a simple malaria infection — qDensityPmu","title":"The quantile function for parasite densities in a simple malaria infection — qDensityPmu","text":"quantile function parasite densities simple malaria infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qDensityPmu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The quantile function for parasite densities in a simple malaria infection — qDensityPmu","text":"","code":"qDensityPmu(xi, mu, a = 0, pRBC = par_lRBC_static(), pSig = par_sigma_abc())"},{"path":"https://dd-harp.github.io/pf.memory/reference/qDensityPmu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The quantile function for parasite densities in a simple malaria infection — qDensityPmu","text":"xi vector quantiles mu expected value log10 parasite densities host cohort age pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qDensityPmu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The quantile function for parasite densities in a simple malaria infection — qDensityPmu","text":"numeric vector length(xi)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qbeta1.html","id":null,"dir":"Reference","previous_headings":"","what":"The quantile function for the beta distribution, an alternative parameterization — qbeta1","title":"The quantile function for the beta distribution, an alternative parameterization — qbeta1","text":"quantile function beta distribution, alternative parameterization","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qbeta1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The quantile function for the beta distribution, an alternative parameterization — qbeta1","text":"","code":"qbeta1(x, mu, pSig = par_sigma_abc())"},{"path":"https://dd-harp.github.io/pf.memory/reference/qbeta1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The quantile function for the beta distribution, an alternative parameterization — qbeta1","text":"x vector quantiles mu mean value distribution (0 <= mu <= 1) pSig parameters dispatch S3 function sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/qbeta1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The quantile function for the beta distribution, an alternative parameterization — qbeta1","text":"numeric vector length(x)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoI.html","id":null,"dir":"Reference","previous_headings":"","what":"The random generation function for the age of infection (AoI) — rAoI","title":"The random generation function for the age of infection (AoI) — rAoI","text":"random generation function age infection (AoI)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The random generation function for the age of infection (AoI) — rAoI","text":"","code":"rAoI(N, a, FoIpar, hhat = NULL, tau = 0, r = 1/200, alphamin = 0)"},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The random generation function for the age of infection (AoI) — rAoI","text":"N number observations host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection alphamin minimum value AoI return","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The random generation function for the age of infection (AoI) — rAoI","text":"numeric vector length(alpha)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoY.html","id":null,"dir":"Reference","previous_headings":"","what":"The random generation function for the age of the youngest infection (AoY) — rAoY","title":"The random generation function for the age of the youngest infection (AoY) — rAoY","text":"random generation function age youngest infection (AoY)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoY.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The random generation function for the age of the youngest infection (AoY) — rAoY","text":"","code":"rAoY(N, a, FoIpar, hhat = NULL, tau = 0, r = 1/200, alphamin = 0)"},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoY.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The random generation function for the age of the youngest infection (AoY) — rAoY","text":"N number observations host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection alphamin minimum value AoI return","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoY.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The random generation function for the age of the youngest infection (AoY) — rAoY","text":"numeric vector length(N)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoYN.html","id":null,"dir":"Reference","previous_headings":"","what":"The random generation function for the age of the youngest of N infections — rAoYN","title":"The random generation function for the age of the youngest of N infections — rAoYN","text":"random generation function age youngest N infections","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoYN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The random generation function for the age of the youngest of N infections — rAoYN","text":"","code":"rAoYN(R, N, a, FoIpar, hhat = NULL, tau = 0, r = 1/200, alphamin = 0)"},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoYN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The random generation function for the age of the youngest of N infections — rAoYN","text":"R number observations N number infections host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection alphamin minimum value AoI return","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rAoYN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The random generation function for the age of the youngest of N infections — rAoYN","text":"numeric vector length R","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rBda.html","id":null,"dir":"Reference","previous_headings":"","what":"Random generation for parasite densities in a host cohort — rBda","title":"Random generation for parasite densities in a host cohort — rBda","text":"Random generation parasite densities host cohort","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rBda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random generation for parasite densities in a host cohort — rBda","text":"","code":"rBda(   N,   a,   FoIpar,   hhat = NULL,   r = 1/200,   tau = 0,   alphamin = 7,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/rBda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random generation for parasite densities in a host cohort — rBda","text":"N number observations host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI r clearance rate simple infection tau cohort birthday alphamin minimum value alpha allowed pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rBda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random generation for parasite densities in a host cohort — rBda","text":"numeric vector length N","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rDensityPalpha.html","id":null,"dir":"Reference","previous_headings":"","what":"The distribution function for parasite densities in a simple malaria infection of age alpha — rDensityPalpha","title":"The distribution function for parasite densities in a simple malaria infection of age alpha — rDensityPalpha","text":"distribution function parasite densities simple malaria infection age alpha","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rDensityPalpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The distribution function for parasite densities in a simple malaria infection of age alpha — rDensityPalpha","text":"","code":"rDensityPalpha(   n,   alpha,   W = 0,   a = 0,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/rDensityPalpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The distribution function for parasite densities in a simple malaria infection of age alpha — rDensityPalpha","text":"n number observations alpha age parasite infection W immune tracking variables host cohort age pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters compute sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rDensityPalpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The distribution function for parasite densities in a simple malaria infection of age alpha — rDensityPalpha","text":"numeric vector length(n)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rDensityPmu.html","id":null,"dir":"Reference","previous_headings":"","what":"Random generation of parasite densities from a simple malaria infection — rDensityPmu","title":"Random generation of parasite densities from a simple malaria infection — rDensityPmu","text":"Random generation parasite densities simple malaria infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rDensityPmu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random generation of parasite densities from a simple malaria infection — rDensityPmu","text":"","code":"rDensityPmu(n, mu, a = 0, pRBC = par_lRBC_static(), pSig = par_sigma_abc())"},{"path":"https://dd-harp.github.io/pf.memory/reference/rDensityPmu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random generation of parasite densities from a simple malaria infection — rDensityPmu","text":"n number observations mu expected value log10 parasite densities host cohort age pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rDensityPmu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random generation of parasite densities from a simple malaria infection — rDensityPmu","text":"numeric vector length(n)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rRda.html","id":null,"dir":"Reference","previous_headings":"","what":"Random generation for M parasite densities in a host cohort with MoI — rRda","title":"Random generation for M parasite densities in a host cohort with MoI — rRda","text":"Random generation M parasite densities host cohort MoI","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rRda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random generation for M parasite densities in a host cohort with MoI — rRda","text":"","code":"rRda(   M,   R,   a,   FoIpar,   hhat = NULL,   tau = 0,   r = 1/200,   alphamin = 7,   pMu = par_alpha2mu_base(),   pRBC = par_lRBC_static(),   pSig = par_sigma_abc(),   pWda = par_Wda_none() )"},{"path":"https://dd-harp.github.io/pf.memory/reference/rRda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random generation for M parasite densities in a host cohort with MoI — rRda","text":"M MoI R number observations host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection alphamin minimum value alpha allowed pMu parameters compute alpha2mu pRBC parameters compute log10RBC pSig parameters dispatch sigma_mu pWda parameters dispatch Wda","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rRda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random generation for M parasite densities in a host cohort with MoI — rRda","text":"R M matrix","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rbeta1.html","id":null,"dir":"Reference","previous_headings":"","what":"The random generation function for the beta distribution, an alternative parameterization\nTitle — rbeta1","title":"The random generation function for the beta distribution, an alternative parameterization\nTitle — rbeta1","text":"random generation function beta distribution, alternative parameterization Title","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rbeta1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The random generation function for the beta distribution, an alternative parameterization\nTitle — rbeta1","text":"","code":"rbeta1(n, mu, pSig = par_sigma_abc())"},{"path":"https://dd-harp.github.io/pf.memory/reference/rbeta1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The random generation function for the beta distribution, an alternative parameterization\nTitle — rbeta1","text":"n number observations mu mean value distribution (0 <= mu <= 1) pSig parameters dispatch S3 function sigma_mu","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/rbeta1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The random generation function for the beta distribution, an alternative parameterization\nTitle — rbeta1","text":"numeric vector length n","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/salpha2mu.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute mean, expected parasite densities mu for multiple values of the age of infection alpha — salpha2mu","title":"Compute mean, expected parasite densities mu for multiple values of the age of infection alpha — salpha2mu","text":"Compute mean, expected parasite densities mu multiple values age infection alpha","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/salpha2mu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute mean, expected parasite densities mu for multiple values of the age of infection alpha — salpha2mu","text":"","code":"salpha2mu(alpha, W, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/salpha2mu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute mean, expected parasite densities mu for multiple values of the age of infection alpha — salpha2mu","text":"alpha parasite's age infection W immune tracking variables par list defines model","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/salpha2mu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute mean, expected parasite densities mu for multiple values of the age of infection alpha — salpha2mu","text":"mean log10 parasite densities, numeric vector length(alpha)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.exp.html","id":null,"dir":"Reference","previous_headings":"","what":"A generalized sinusoidal seasonal pattern, exponentiated — seasonalFoI.exp","title":"A generalized sinusoidal seasonal pattern, exponentiated — seasonalFoI.exp","text":"generalized sinusoidal seasonal pattern, exponentiated","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generalized sinusoidal seasonal pattern, exponentiated — seasonalFoI.exp","text":"","code":"# S3 method for exp seasonalFoI(t, par = par_expSeason())"},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A generalized sinusoidal seasonal pattern, exponentiated — seasonalFoI.exp","text":"t time par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A generalized sinusoidal seasonal pattern, exponentiated — seasonalFoI.exp","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.flat.html","id":null,"dir":"Reference","previous_headings":"","what":"The ","title":"The ","text":"\"seasonality\" function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ","text":"","code":"# S3 method for flat seasonalFoI(t, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.flat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ","text":"t time par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.flat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The ","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a seasonal pattern to the FoI trace function — seasonalFoI","title":"Add a seasonal pattern to the FoI trace function — seasonalFoI","text":"Add seasonal pattern FoI trace function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a seasonal pattern to the FoI trace function — seasonalFoI","text":"","code":"seasonalFoI(t, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a seasonal pattern to the FoI trace function — seasonalFoI","text":"t time par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a seasonal pattern to the FoI trace function — seasonalFoI","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.sin.html","id":null,"dir":"Reference","previous_headings":"","what":"A generalized sinusoidal seasonal pattern — seasonalFoI.sin","title":"A generalized sinusoidal seasonal pattern — seasonalFoI.sin","text":"generalized sinusoidal seasonal pattern","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.sin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A generalized sinusoidal seasonal pattern — seasonalFoI.sin","text":"","code":"# S3 method for sin seasonalFoI(t, par = par_sinSeason())"},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.sin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A generalized sinusoidal seasonal pattern — seasonalFoI.sin","text":"t time par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/seasonalFoI.sin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A generalized sinusoidal seasonal pattern — seasonalFoI.sin","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.0.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.0","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.0","text":"function returns constrained values variance beta distrution function mean.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.0","text":"","code":"# S3 method for `0` sigma(mu, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.0","text":"mu mean value distribution (0 <= mu <= 1) par parameters dispatch configure instances","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.0","text":"numeric vector length(mu)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.abc.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.abc","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.abc","text":"function returns constrained values variance beta distrution function mean.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.abc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.abc","text":"","code":"# S3 method for abc sigma(mu, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.abc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.abc","text":"mu mean value distribution (0 <= mu <= 1) par parameters dispatch configure instances","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.abc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma.abc","text":"numeric vector length(mu)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to compute the variance of the beta distrution as a function of the mean. — sigma","title":"A function to compute the variance of the beta distrution as a function of the mean. — sigma","text":"function compute variance beta distrution function mean.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to compute the variance of the beta distrution as a function of the mean. — sigma","text":"","code":"sigma(mu, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to compute the variance of the beta distrution as a function of the mean. — sigma","text":"mu mean value distribution (0 <= mu <= 1) par parameters dispatch configure instances","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to compute the variance of the beta distrution as a function of the mean. — sigma","text":"numeric vector length(mu)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma_mu.abc.html","id":null,"dir":"Reference","previous_headings":"","what":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma_mu.abc","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma_mu.abc","text":"function returns constrained values variance beta distrution function mean.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma_mu.abc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma_mu.abc","text":"","code":"# S3 method for abc sigma_mu(mu, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma_mu.abc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma_mu.abc","text":"mu mean value distribution (0 <= mu <= 1) par parameters dispatch configure instances","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma_mu.abc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function that returns constrained values of the variance for the beta distrution as a function of the mean. — sigma_mu.abc","text":"numeric vector length(mu)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma_mu.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to compute the variance of the beta distrution as a function of the mean. — sigma_mu","title":"A function to compute the variance of the beta distrution as a function of the mean. — sigma_mu","text":"function compute variance beta distrution function mean.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma_mu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to compute the variance of the beta distrution as a function of the mean. — sigma_mu","text":"","code":"sigma_mu(mu, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma_mu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to compute the variance of the beta distrution as a function of the mean. — sigma_mu","text":"mu mean value distribution (0 <= mu <= 1) par parameters dispatch configure instances","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/sigma_mu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to compute the variance of the beta distrution as a function of the mean. — sigma_mu","text":"numeric vector length(mu)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solveMMinfty.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve the queuing model M/M/infinity — solveMMinfty","title":"Solve the queuing model M/M/infinity — solveMMinfty","text":"Solve queuing model M/M/infinity","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solveMMinfty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve the queuing model M/M/infinity — solveMMinfty","text":"","code":"solveMMinfty(h, FoIpar, r = 1/200, tau = 0, Tmax = 730, dt = 1)"},{"path":"https://dd-harp.github.io/pf.memory/reference/solveMMinfty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve the queuing model M/M/infinity — solveMMinfty","text":"h force infection FoIpar FoI trace function r clearance rate simple infection tau cohort birthday Tmax maximum runtime (days) dt output frequency (days)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solveMMinfty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve the queuing model M/M/infinity — solveMMinfty","text":"list orbits name","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dAoI.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve the system of differential equations to compute the moments of the AoI over time. — solve_dAoI","title":"Solve the system of differential equations to compute the moments of the AoI over time. — solve_dAoI","text":"Solve system differential equations compute moments AoI time.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dAoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve the system of differential equations to compute the moments of the AoI over time. — solve_dAoI","text":"","code":"solve_dAoI(h, FoIpar, r = 1/200, tau = 0, Tmax = 730, dt = 1, N = 3)"},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dAoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve the system of differential equations to compute the moments of the AoI over time. — solve_dAoI","text":"h force infection FoIpar FoI trace function r clearance rate simple infection tau cohort birthday Tmax maximum runtime (days) dt output frequency (days) N total number moments compute","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dAoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve the system of differential equations to compute the moments of the AoI over time. — solve_dAoI","text":"data.frame orbits","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dAoYda.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve the system of differential equations to compute the approximate moments of the AoY over time. — solve_dAoYda","title":"Solve the system of differential equations to compute the approximate moments of the AoY over time. — solve_dAoYda","text":"Solve system differential equations compute approximate moments AoY time.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dAoYda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve the system of differential equations to compute the approximate moments of the AoY over time. — solve_dAoYda","text":"","code":"solve_dAoYda(h, FoIpar, r = 1/200, tau = 0, Tmax = 730, dt = 1, n = 8)"},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dAoYda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve the system of differential equations to compute the approximate moments of the AoY over time. — solve_dAoYda","text":"h force infection FoIpar FoI trace function r clearance rate simple infection tau cohort birthday Tmax maximum runtime (days) dt output frequency (days) n number terms use F(r,m)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dAoYda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve the system of differential equations to compute the approximate moments of the AoY over time. — solve_dAoYda","text":"data.frame describing orbits","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dm.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve the hybrid model for the MoI — solve_dm","title":"Solve the hybrid model for the MoI — solve_dm","text":"Solve hybrid model MoI","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve the hybrid model for the MoI — solve_dm","text":"","code":"solve_dm(h, FoIpar, r = 1/200, tau = 0, Tmax = 730, dt = 1)"},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve the hybrid model for the MoI — solve_dm","text":"h force infection FoIpar FoI trace function r clearance rate simple infection tau cohort birthday Tmax maximum runtime (days) dt output frequency (days)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve the hybrid model for the MoI — solve_dm","text":"matrix orbits","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dpda.html","id":null,"dir":"Reference","previous_headings":"","what":"Solve a system of differential equations to compute the true PR and the MoI — solve_dpda","title":"Solve a system of differential equations to compute the true PR and the MoI — solve_dpda","text":"Solve system differential equations compute true PR MoI","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dpda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solve a system of differential equations to compute the true PR and the MoI — solve_dpda","text":"","code":"solve_dpda(h, FoIpar, r = 1/200, tau = 0, Tmax = 730, dt = 1)"},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dpda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solve a system of differential equations to compute the true PR and the MoI — solve_dpda","text":"h scaling factor FoI FoIpar parameters define FoI function r clearance rate simple infection tau cohort birthday Tmax maximum runtime (days) dt output frequency (days)","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/solve_dpda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solve a system of differential equations to compute the true PR and the MoI — solve_dpda","text":"data.frame orbits","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/trendFoI.flat.html","id":null,"dir":"Reference","previous_headings":"","what":"The ","title":"The ","text":"\"trend\" function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/trendFoI.flat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The ","text":"","code":"# S3 method for flat trendFoI(t, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/trendFoI.flat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The ","text":"t time par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/trendFoI.flat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The ","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/trendFoI.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a trend to the FoI trace function — trendFoI","title":"Add a trend to the FoI trace function — trendFoI","text":"Add trend FoI trace function","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/trendFoI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a trend to the FoI trace function — trendFoI","text":"","code":"trendFoI(t, par)"},{"path":"https://dd-harp.github.io/pf.memory/reference/trendFoI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a trend to the FoI trace function — trendFoI","text":"t time par list","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/trendFoI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a trend to the FoI trace function — trendFoI","text":"numeric","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/truePRa.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the true PR in a cohort as a function of age and exposure — truePRa","title":"Compute the true PR in a cohort as a function of age and exposure — truePRa","text":"Compute true PR cohort function age exposure","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/truePRa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the true PR in a cohort as a function of age and exposure — truePRa","text":"","code":"truePRa(a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/truePRa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the true PR in a cohort as a function of age and exposure — truePRa","text":"host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/truePRa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the true PR in a cohort as a function of age and exposure — truePRa","text":"numeric vector length()","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/zda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the density of parasite infections in a host cohort — zda","title":"Compute the density of parasite infections in a host cohort — zda","text":"Solutions time age version Ross-Macdonald model.","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/zda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the density of parasite infections in a host cohort — zda","text":"","code":"zda(alpha, a, FoIpar, hhat = NULL, tau = 0, r = 1/200)"},{"path":"https://dd-harp.github.io/pf.memory/reference/zda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the density of parasite infections in a host cohort — zda","text":"alpha parasites age infection host cohort age FoIpar parameters define FoI function hhat local scaling parameter FoI tau cohort birthday r clearance rate simple infection","code":""},{"path":"https://dd-harp.github.io/pf.memory/reference/zda.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the density of parasite infections in a host cohort — zda","text":"numeric vector length(alpha)","code":""}]
